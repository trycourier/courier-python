# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAudiencesClient, RawAudiencesClient
from .types.audience import Audience
from .types.audience_list_response import AudienceListResponse
from .types.audience_member_list_response import AudienceMemberListResponse
from .types.audience_update_response import AudienceUpdateResponse
from .types.filter import Filter

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AudiencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAudiencesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAudiencesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAudiencesClient
        """
        return self._raw_client

    def get(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Audience:
        """
        Returns the specified audience by id.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Audience

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.get(
            audience_id="audience_id",
        )
        """
        _response = self._raw_client.get(audience_id, request_options=request_options)
        return _response.data

    def update(
        self,
        audience_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        filter: typing.Optional[Filter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceUpdateResponse:
        """
        Creates or updates audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        name : typing.Optional[str]
            The name of the audience

        description : typing.Optional[str]
            A description of the audience

        filter : typing.Optional[Filter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceUpdateResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.update(
            audience_id="audience_id",
        )
        """
        _response = self._raw_client.update(
            audience_id, name=name, description=description, filter=filter, request_options=request_options
        )
        return _response.data

    def delete(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.delete(
            audience_id="audience_id",
        )
        """
        _response = self._raw_client.delete(audience_id, request_options=request_options)
        return _response.data

    def list_members(
        self,
        audience_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceMemberListResponse:
        """
        Get list of members of an audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of members

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceMemberListResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.list_members(
            audience_id="audience_id",
        )
        """
        _response = self._raw_client.list_members(audience_id, cursor=cursor, request_options=request_options)
        return _response.data

    def list_audiences(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AudienceListResponse:
        """
        Get the audiences associated with the authorization token.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audiences

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceListResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.list_audiences()
        """
        _response = self._raw_client.list_audiences(cursor=cursor, request_options=request_options)
        return _response.data


class AsyncAudiencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAudiencesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAudiencesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAudiencesClient
        """
        return self._raw_client

    async def get(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Audience:
        """
        Returns the specified audience by id.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Audience

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.get(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(audience_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        audience_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        filter: typing.Optional[Filter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceUpdateResponse:
        """
        Creates or updates audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        name : typing.Optional[str]
            The name of the audience

        description : typing.Optional[str]
            A description of the audience

        filter : typing.Optional[Filter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceUpdateResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.update(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            audience_id, name=name, description=description, filter=filter, request_options=request_options
        )
        return _response.data

    async def delete(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.delete(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(audience_id, request_options=request_options)
        return _response.data

    async def list_members(
        self,
        audience_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceMemberListResponse:
        """
        Get list of members of an audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of members

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceMemberListResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.list_members(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_members(audience_id, cursor=cursor, request_options=request_options)
        return _response.data

    async def list_audiences(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AudienceListResponse:
        """
        Get the audiences associated with the authorization token.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audiences

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceListResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.list_audiences()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_audiences(cursor=cursor, request_options=request_options)
        return _response.data
