# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.bad_request import BadRequest
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from .types.audience import Audience
from .types.audience_list_response import AudienceListResponse
from .types.audience_member_list_response import AudienceMemberListResponse
from .types.audience_update_response import AudienceUpdateResponse
from .types.filter import Filter

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AudiencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Audience:
        """
        Returns the specified audience by id.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Audience

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.get(
            audience_id="audience_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(Audience, construct_type(type_=Audience, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        audience_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        filter: typing.Optional[Filter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceUpdateResponse:
        """
        Creates or updates audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        name : typing.Optional[str]
            The name of the audience

        description : typing.Optional[str]
            A description of the audience

        filter : typing.Optional[Filter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceUpdateResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.update(
            audience_id="audience_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}",
            method="PUT",
            json={"name": name, "description": description, "filter": filter},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceUpdateResponse, construct_type(type_=AudienceUpdateResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.delete(
            audience_id="audience_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_members(
        self,
        audience_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceMemberListResponse:
        """
        Get list of members of an audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of members

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceMemberListResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.list_members(
            audience_id="audience_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}/members",
            method="GET",
            params={"cursor": cursor},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceMemberListResponse, construct_type(type_=AudienceMemberListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_audiences(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AudienceListResponse:
        """
        Get the audiences associated with the authorization token.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audiences

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceListResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audiences.list_audiences()
        """
        _response = self._client_wrapper.httpx_client.request(
            "audiences", method="GET", params={"cursor": cursor}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceListResponse, construct_type(type_=AudienceListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAudiencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Audience:
        """
        Returns the specified audience by id.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience_id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Audience

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.get(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(Audience, construct_type(type_=Audience, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        audience_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        filter: typing.Optional[Filter] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceUpdateResponse:
        """
        Creates or updates audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        name : typing.Optional[str]
            The name of the audience

        description : typing.Optional[str]
            A description of the audience

        filter : typing.Optional[Filter]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceUpdateResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.update(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}",
            method="PUT",
            json={"name": name, "description": description, "filter": filter},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceUpdateResponse, construct_type(type_=AudienceUpdateResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, audience_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.delete(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_members(
        self,
        audience_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AudienceMemberListResponse:
        """
        Get list of members of an audience.

        Parameters
        ----------
        audience_id : str
            A unique identifier representing the audience id

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of members

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceMemberListResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.list_members(
                audience_id="audience_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"audiences/{jsonable_encoder(audience_id)}/members",
            method="GET",
            params={"cursor": cursor},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceMemberListResponse, construct_type(type_=AudienceMemberListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_audiences(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AudienceListResponse:
        """
        Get the audiences associated with the authorization token.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audiences

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AudienceListResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audiences.list_audiences()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "audiences", method="GET", params={"cursor": cursor}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AudienceListResponse, construct_type(type_=AudienceListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
