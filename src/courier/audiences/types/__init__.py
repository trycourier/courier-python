# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .audience import Audience
    from .audience_list_response import AudienceListResponse
    from .audience_member import AudienceMember
    from .audience_member_get_response import AudienceMemberGetResponse
    from .audience_member_list_response import AudienceMemberListResponse
    from .audience_update_response import AudienceUpdateResponse
    from .base_filter_config import BaseFilterConfig
    from .comparison_operator import ComparisonOperator
    from .filter import Filter
    from .filter_config import FilterConfig
    from .logical_operator import LogicalOperator
    from .nested_filter_config import NestedFilterConfig
    from .operator import Operator
    from .single_filter_config import SingleFilterConfig
_dynamic_imports: typing.Dict[str, str] = {
    "Audience": ".audience",
    "AudienceListResponse": ".audience_list_response",
    "AudienceMember": ".audience_member",
    "AudienceMemberGetResponse": ".audience_member_get_response",
    "AudienceMemberListResponse": ".audience_member_list_response",
    "AudienceUpdateResponse": ".audience_update_response",
    "BaseFilterConfig": ".base_filter_config",
    "ComparisonOperator": ".comparison_operator",
    "Filter": ".filter",
    "FilterConfig": ".filter_config",
    "LogicalOperator": ".logical_operator",
    "NestedFilterConfig": ".nested_filter_config",
    "Operator": ".operator",
    "SingleFilterConfig": ".single_filter_config",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Audience",
    "AudienceListResponse",
    "AudienceMember",
    "AudienceMemberGetResponse",
    "AudienceMemberListResponse",
    "AudienceUpdateResponse",
    "BaseFilterConfig",
    "ComparisonOperator",
    "Filter",
    "FilterConfig",
    "LogicalOperator",
    "NestedFilterConfig",
    "Operator",
    "SingleFilterConfig",
]
