# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAuditEventsClient, RawAuditEventsClient
from .types.audit_event import AuditEvent
from .types.list_audit_events_response import ListAuditEventsResponse


class AuditEventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuditEventsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuditEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuditEventsClient
        """
        return self._raw_client

    def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAuditEventsResponse:
        """
        Fetch the list of audit events

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audit events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAuditEventsResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audit_events.list()
        """
        _response = self._raw_client.list(cursor=cursor, request_options=request_options)
        return _response.data

    def get(self, audit_event_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AuditEvent:
        """
        Fetch a specific audit event by ID.

        Parameters
        ----------
        audit_event_id : str
            A unique identifier associated with the audit event you wish to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuditEvent

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.audit_events.get(
            audit_event_id="audit-event-id",
        )
        """
        _response = self._raw_client.get(audit_event_id, request_options=request_options)
        return _response.data


class AsyncAuditEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuditEventsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuditEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuditEventsClient
        """
        return self._raw_client

    async def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAuditEventsResponse:
        """
        Fetch the list of audit events

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of audit events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAuditEventsResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audit_events.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(cursor=cursor, request_options=request_options)
        return _response.data

    async def get(self, audit_event_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AuditEvent:
        """
        Fetch a specific audit event by ID.

        Parameters
        ----------
        audit_event_id : str
            A unique identifier associated with the audit event you wish to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuditEvent

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.audit_events.get(
                audit_event_id="audit-event-id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(audit_event_id, request_options=request_options)
        return _response.data
