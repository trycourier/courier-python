# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAuthTokensClient, RawAuthTokensClient
from .types.issue_token_response import IssueTokenResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthTokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthTokensClient
        """
        return self._raw_client

    def issue_token(
        self,
        *,
        scope: str,
        expires_in: str,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IssueTokenResponse:
        """
        Returns a new access token.

        Parameters
        ----------
        scope : str

        expires_in : str

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IssueTokenResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.auth_tokens.issue_token(
            scope="scope",
            expires_in="expires_in",
        )
        """
        _response = self._raw_client.issue_token(
            scope=scope,
            expires_in=expires_in,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data


class AsyncAuthTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthTokensClient
        """
        return self._raw_client

    async def issue_token(
        self,
        *,
        scope: str,
        expires_in: str,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IssueTokenResponse:
        """
        Returns a new access token.

        Parameters
        ----------
        scope : str

        expires_in : str

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IssueTokenResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.auth_tokens.issue_token(
                scope="scope",
                expires_in="expires_in",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.issue_token(
            scope=scope,
            expires_in=expires_in,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data
