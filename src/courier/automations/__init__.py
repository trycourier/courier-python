# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        AccessorType,
        Automation,
        AutomationAdHocInvokeParams,
        AutomationAddToBatchMaxItemsType,
        AutomationAddToBatchRetain,
        AutomationAddToBatchRetainType,
        AutomationAddToBatchScope,
        AutomationAddToBatchStep,
        AutomationAddToDigestStep,
        AutomationCancelStep,
        AutomationDelayStep,
        AutomationFetchDataStep,
        AutomationFetchDataWebhook,
        AutomationFetchDataWebhookMethod,
        AutomationInvokeParams,
        AutomationInvokeResponse,
        AutomationInvokeStep,
        AutomationInvokeTemplateParams,
        AutomationRunContext,
        AutomationSendListStep,
        AutomationSendStep,
        AutomationStep,
        AutomationStepOption,
        AutomationThrottleOnThrottle,
        AutomationThrottleScope,
        AutomationThrottleStep,
        AutomationUpdateProfileStep,
        AutomationV2SendStep,
        MergeAlgorithm,
        Profile,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "AccessorType": ".types",
    "Automation": ".types",
    "AutomationAdHocInvokeParams": ".types",
    "AutomationAddToBatchMaxItemsType": ".types",
    "AutomationAddToBatchRetain": ".types",
    "AutomationAddToBatchRetainType": ".types",
    "AutomationAddToBatchScope": ".types",
    "AutomationAddToBatchStep": ".types",
    "AutomationAddToDigestStep": ".types",
    "AutomationCancelStep": ".types",
    "AutomationDelayStep": ".types",
    "AutomationFetchDataStep": ".types",
    "AutomationFetchDataWebhook": ".types",
    "AutomationFetchDataWebhookMethod": ".types",
    "AutomationInvokeParams": ".types",
    "AutomationInvokeResponse": ".types",
    "AutomationInvokeStep": ".types",
    "AutomationInvokeTemplateParams": ".types",
    "AutomationRunContext": ".types",
    "AutomationSendListStep": ".types",
    "AutomationSendStep": ".types",
    "AutomationStep": ".types",
    "AutomationStepOption": ".types",
    "AutomationThrottleOnThrottle": ".types",
    "AutomationThrottleScope": ".types",
    "AutomationThrottleStep": ".types",
    "AutomationUpdateProfileStep": ".types",
    "AutomationV2SendStep": ".types",
    "MergeAlgorithm": ".types",
    "Profile": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AccessorType",
    "Automation",
    "AutomationAdHocInvokeParams",
    "AutomationAddToBatchMaxItemsType",
    "AutomationAddToBatchRetain",
    "AutomationAddToBatchRetainType",
    "AutomationAddToBatchScope",
    "AutomationAddToBatchStep",
    "AutomationAddToDigestStep",
    "AutomationCancelStep",
    "AutomationDelayStep",
    "AutomationFetchDataStep",
    "AutomationFetchDataWebhook",
    "AutomationFetchDataWebhookMethod",
    "AutomationInvokeParams",
    "AutomationInvokeResponse",
    "AutomationInvokeStep",
    "AutomationInvokeTemplateParams",
    "AutomationRunContext",
    "AutomationSendListStep",
    "AutomationSendStep",
    "AutomationStep",
    "AutomationStepOption",
    "AutomationThrottleOnThrottle",
    "AutomationThrottleScope",
    "AutomationThrottleStep",
    "AutomationUpdateProfileStep",
    "AutomationV2SendStep",
    "MergeAlgorithm",
    "Profile",
]
