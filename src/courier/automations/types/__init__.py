# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .accessor_type import AccessorType
    from .automation import Automation
    from .automation_ad_hoc_invoke_params import AutomationAdHocInvokeParams
    from .automation_add_to_batch_max_items_type import AutomationAddToBatchMaxItemsType
    from .automation_add_to_batch_retain import AutomationAddToBatchRetain
    from .automation_add_to_batch_retain_type import AutomationAddToBatchRetainType
    from .automation_add_to_batch_scope import AutomationAddToBatchScope
    from .automation_add_to_batch_step import AutomationAddToBatchStep
    from .automation_add_to_digest_step import AutomationAddToDigestStep
    from .automation_cancel_step import AutomationCancelStep
    from .automation_delay_step import AutomationDelayStep
    from .automation_fetch_data_step import AutomationFetchDataStep
    from .automation_fetch_data_webhook import AutomationFetchDataWebhook
    from .automation_fetch_data_webhook_method import AutomationFetchDataWebhookMethod
    from .automation_invoke_params import AutomationInvokeParams
    from .automation_invoke_response import AutomationInvokeResponse
    from .automation_invoke_step import AutomationInvokeStep
    from .automation_invoke_template_params import AutomationInvokeTemplateParams
    from .automation_run_context import AutomationRunContext
    from .automation_send_list_step import AutomationSendListStep
    from .automation_send_step import AutomationSendStep
    from .automation_step import AutomationStep
    from .automation_step_option import AutomationStepOption
    from .automation_throttle_on_throttle import AutomationThrottleOnThrottle
    from .automation_throttle_scope import AutomationThrottleScope
    from .automation_throttle_step import AutomationThrottleStep
    from .automation_update_profile_step import AutomationUpdateProfileStep
    from .automation_v_2_send_step import AutomationV2SendStep
    from .merge_algorithm import MergeAlgorithm
    from .profile import Profile
_dynamic_imports: typing.Dict[str, str] = {
    "AccessorType": ".accessor_type",
    "Automation": ".automation",
    "AutomationAdHocInvokeParams": ".automation_ad_hoc_invoke_params",
    "AutomationAddToBatchMaxItemsType": ".automation_add_to_batch_max_items_type",
    "AutomationAddToBatchRetain": ".automation_add_to_batch_retain",
    "AutomationAddToBatchRetainType": ".automation_add_to_batch_retain_type",
    "AutomationAddToBatchScope": ".automation_add_to_batch_scope",
    "AutomationAddToBatchStep": ".automation_add_to_batch_step",
    "AutomationAddToDigestStep": ".automation_add_to_digest_step",
    "AutomationCancelStep": ".automation_cancel_step",
    "AutomationDelayStep": ".automation_delay_step",
    "AutomationFetchDataStep": ".automation_fetch_data_step",
    "AutomationFetchDataWebhook": ".automation_fetch_data_webhook",
    "AutomationFetchDataWebhookMethod": ".automation_fetch_data_webhook_method",
    "AutomationInvokeParams": ".automation_invoke_params",
    "AutomationInvokeResponse": ".automation_invoke_response",
    "AutomationInvokeStep": ".automation_invoke_step",
    "AutomationInvokeTemplateParams": ".automation_invoke_template_params",
    "AutomationRunContext": ".automation_run_context",
    "AutomationSendListStep": ".automation_send_list_step",
    "AutomationSendStep": ".automation_send_step",
    "AutomationStep": ".automation_step",
    "AutomationStepOption": ".automation_step_option",
    "AutomationThrottleOnThrottle": ".automation_throttle_on_throttle",
    "AutomationThrottleScope": ".automation_throttle_scope",
    "AutomationThrottleStep": ".automation_throttle_step",
    "AutomationUpdateProfileStep": ".automation_update_profile_step",
    "AutomationV2SendStep": ".automation_v_2_send_step",
    "MergeAlgorithm": ".merge_algorithm",
    "Profile": ".profile",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AccessorType",
    "Automation",
    "AutomationAdHocInvokeParams",
    "AutomationAddToBatchMaxItemsType",
    "AutomationAddToBatchRetain",
    "AutomationAddToBatchRetainType",
    "AutomationAddToBatchScope",
    "AutomationAddToBatchStep",
    "AutomationAddToDigestStep",
    "AutomationCancelStep",
    "AutomationDelayStep",
    "AutomationFetchDataStep",
    "AutomationFetchDataWebhook",
    "AutomationFetchDataWebhookMethod",
    "AutomationInvokeParams",
    "AutomationInvokeResponse",
    "AutomationInvokeStep",
    "AutomationInvokeTemplateParams",
    "AutomationRunContext",
    "AutomationSendListStep",
    "AutomationSendStep",
    "AutomationStep",
    "AutomationStepOption",
    "AutomationThrottleOnThrottle",
    "AutomationThrottleScope",
    "AutomationThrottleStep",
    "AutomationUpdateProfileStep",
    "AutomationV2SendStep",
    "MergeAlgorithm",
    "Profile",
]
