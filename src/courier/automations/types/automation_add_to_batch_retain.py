# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .automation_add_to_batch_retain_type import AutomationAddToBatchRetainType


class AutomationAddToBatchRetain(UncheckedBaseModel):
    """
    Defines what items should be retained and passed along to the next steps when the batch is released

    Examples
    --------
    from courier.automations import AutomationAddToBatchRetain

    AutomationAddToBatchRetain(
        type="highest",
        count=10,
        sort_key="refs.data.my_custom_scoring",
    )
    """

    type: AutomationAddToBatchRetainType = pydantic.Field()
    """
    Keep N number of notifications based on the type. First/Last N based on notification received.
    highest/lowest based on a scoring key providing in the data accessed by sort_key
    """

    count: int = pydantic.Field()
    """
    The number of records to keep in batch. Default is 10 and only configurable by requesting from support.
    When configurable minimum is 2 and maximum is 100.
    """

    sort_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    Defines the data value data[sort_key] that is used to sort the stored items. Required when type is set to highest or lowest.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
