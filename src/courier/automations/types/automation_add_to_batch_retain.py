# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .automation_add_to_batch_retain_type import AutomationAddToBatchRetainType


class AutomationAddToBatchRetain(pydantic_v1.BaseModel):
    """
    Defines what items should be retained and passed along to the next steps when the batch is released
    ---
    from courier import AutomationAddToBatchRetain

    AutomationAddToBatchRetain(
        type="highest",
        count=10,
        sort_key="refs.data.my_custom_scoring",
    )
    """

    type: AutomationAddToBatchRetainType = pydantic_v1.Field()
    """
    Keep N number of notifications based on the type. First/Last N based on notification received.
    highest/lowest based on a scoring key providing in the data accessed by sort_key
    """

    count: int = pydantic_v1.Field()
    """
    The number of records to keep in batch. Default is 10 and only configurable by requesting from support.
    When configurable minimum is 2 and maximum is 100.
    """

    sort_key: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Defines the data value data[sort_key] that is used to sort the stored items. Required when type is set to highest or lowest.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
