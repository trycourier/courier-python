# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from .automation_step import AutomationStep
from .automation_throttle_on_throttle import AutomationThrottleOnThrottle
from .automation_throttle_scope import AutomationThrottleScope


class AutomationThrottleStep(AutomationStep):
    """
    Examples
    --------
    from courier.automations import (
        AutomationThrottleOnThrottle,
        AutomationThrottleStep,
    )

    AutomationThrottleStep(
        max_allowed=1,
        period="PT5M",
        scope="dynamic",
        throttle_key="refs.data.throttle_key",
        on_throttle=AutomationThrottleOnThrottle(
            node_id="on-throttle-node-ref",
        ),
    )
    """

    action: typing.Literal["throttle"] = "throttle"
    max_allowed: int = pydantic.Field()
    """
    Maximum number of allowed notifications in that timeframe
    """

    period: str = pydantic.Field()
    """
    Defines the throttle period which corresponds to the max_allowed. Specified as an ISO 8601 duration, https://en.wikipedia.org/wiki/ISO_8601#Durations
    """

    scope: AutomationThrottleScope
    throttle_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    If using scope=dynamic, provide the reference (e.g., refs.data.throttle_key) to the how the throttle should be identified
    """

    should_alert: typing.Literal[False] = pydantic.Field(default=False)
    """
    Value must be true
    """

    on_throttle: AutomationThrottleOnThrottle

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
