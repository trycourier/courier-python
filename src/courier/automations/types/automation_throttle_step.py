# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .automation_step import AutomationStep
from .automation_throttle_on_throttle import AutomationThrottleOnThrottle
from .automation_throttle_scope import AutomationThrottleScope


class AutomationThrottleStep(AutomationStep):
    """
    from courier import AutomationThrottleOnThrottle, AutomationThrottleStep

    AutomationThrottleStep(
        action="throttle",
        max_allowed=1,
        period="PT5M",
        scope="dynamic",
        throttle_key="refs.data.throttle_key",
        should_alert=False,
        on_throttle=AutomationThrottleOnThrottle(
            node_id="on-throttle-node-ref",
        ),
    )
    """

    action: typing.Literal["throttle"]
    max_allowed: int = pydantic_v1.Field()
    """
    Maximum number of allowed notifications in that timeframe
    """

    period: str = pydantic_v1.Field()
    """
    Defines the throttle period which corresponds to the max_allowed. Specified as an ISO 8601 duration, https://en.wikipedia.org/wiki/ISO_8601#Durations
    """

    scope: AutomationThrottleScope
    throttle_key: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    If using scope=dynamic, provide the reference (e.g., refs.data.throttle_key) to the how the throttle should be identified
    """

    should_alert: typing.Literal[False] = pydantic_v1.Field()
    """
    Value must be true
    """

    on_throttle: AutomationThrottleOnThrottle

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
