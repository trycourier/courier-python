# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawBrandsClient, RawBrandsClient
from .types.brand import Brand
from .types.brand_parameters import BrandParameters
from .types.brand_settings import BrandSettings
from .types.brand_snippets import BrandSnippets
from .types.brands_response import BrandsResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BrandsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBrandsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBrandsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBrandsClient
        """
        return self._raw_client

    def create(
        self,
        *,
        request: BrandParameters,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Brand:
        """
        Parameters
        ----------
        request : BrandParameters

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        from courier import Courier
        from courier.brands import BrandParameters, BrandSettings

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.brands.create(
            request=BrandParameters(
                name="name",
                settings=BrandSettings(),
            ),
        )
        """
        _response = self._raw_client.create(
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def get(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Brand:
        """
        Fetch a specific brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.brands.get(
            brand_id="brand_id",
        )
        """
        _response = self._raw_client.get(brand_id, request_options=request_options)
        return _response.data

    def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> BrandsResponse:
        """
        Get the list of brands.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of brands.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrandsResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.brands.list()
        """
        _response = self._raw_client.list(cursor=cursor, request_options=request_options)
        return _response.data

    def delete(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.brands.delete(
            brand_id="brand_id",
        )
        """
        _response = self._raw_client.delete(brand_id, request_options=request_options)
        return _response.data

    def replace(
        self,
        brand_id: str,
        *,
        name: str,
        settings: typing.Optional[BrandSettings] = OMIT,
        snippets: typing.Optional[BrandSnippets] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Brand:
        """
        Replace an existing brand with the supplied values.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to update.

        name : str
            The name of the brand.

        settings : typing.Optional[BrandSettings]

        snippets : typing.Optional[BrandSnippets]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.brands.replace(
            brand_id="brand_id",
            name="name",
        )
        """
        _response = self._raw_client.replace(
            brand_id, name=name, settings=settings, snippets=snippets, request_options=request_options
        )
        return _response.data


class AsyncBrandsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBrandsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBrandsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBrandsClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        request: BrandParameters,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Brand:
        """
        Parameters
        ----------
        request : BrandParameters

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.brands import BrandParameters, BrandSettings

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.brands.create(
                request=BrandParameters(
                    name="name",
                    settings=BrandSettings(),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def get(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Brand:
        """
        Fetch a specific brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.brands.get(
                brand_id="brand_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(brand_id, request_options=request_options)
        return _response.data

    async def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> BrandsResponse:
        """
        Get the list of brands.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of brands.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BrandsResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.brands.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(cursor=cursor, request_options=request_options)
        return _response.data

    async def delete(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.brands.delete(
                brand_id="brand_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(brand_id, request_options=request_options)
        return _response.data

    async def replace(
        self,
        brand_id: str,
        *,
        name: str,
        settings: typing.Optional[BrandSettings] = OMIT,
        snippets: typing.Optional[BrandSnippets] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Brand:
        """
        Replace an existing brand with the supplied values.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to update.

        name : str
            The name of the brand.

        settings : typing.Optional[BrandSettings]

        snippets : typing.Optional[BrandSnippets]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Brand

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.brands.replace(
                brand_id="brand_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.replace(
            brand_id, name=name, settings=settings, snippets=snippets, request_options=request_options
        )
        return _response.data
