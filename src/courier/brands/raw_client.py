# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.already_exists_error import AlreadyExistsError
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.conflict_error import ConflictError
from ..commons.errors.payment_required_error import PaymentRequiredError
from ..commons.types.already_exists import AlreadyExists
from ..commons.types.bad_request import BadRequest
from ..commons.types.conflict import Conflict
from ..commons.types.payment_required import PaymentRequired
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from .types.brand import Brand
from .types.brand_parameters import BrandParameters
from .types.brand_settings import BrandSettings
from .types.brand_snippets import BrandSnippets
from .types.brands_response import BrandsResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawBrandsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        request: BrandParameters,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Brand]:
        """
        Parameters
        ----------
        request : BrandParameters

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Brand]
        """
        _response = self._client_wrapper.httpx_client.request(
            "brands",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=BrandParameters, direction="write"
            ),
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PaymentRequired,
                        construct_type(
                            type_=PaymentRequired,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise AlreadyExistsError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        AlreadyExists,
                        construct_type(
                            type_=AlreadyExists,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Brand]:
        """
        Fetch a specific brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Brand]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[BrandsResponse]:
        """
        Get the list of brands.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of brands.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BrandsResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "brands",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BrandsResponse,
                    construct_type(
                        type_=BrandsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """
        Delete a brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Conflict,
                        construct_type(
                            type_=Conflict,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def replace(
        self,
        brand_id: str,
        *,
        name: str,
        settings: typing.Optional[BrandSettings] = OMIT,
        snippets: typing.Optional[BrandSnippets] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Brand]:
        """
        Replace an existing brand with the supplied values.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to update.

        name : str
            The name of the brand.

        settings : typing.Optional[BrandSettings]

        snippets : typing.Optional[BrandSnippets]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Brand]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="PUT",
            json={
                "name": name,
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=BrandSettings, direction="write"
                ),
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=BrandSnippets, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawBrandsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        request: BrandParameters,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Brand]:
        """
        Parameters
        ----------
        request : BrandParameters

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Brand]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "brands",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=BrandParameters, direction="write"
            ),
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PaymentRequired,
                        construct_type(
                            type_=PaymentRequired,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise AlreadyExistsError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        AlreadyExists,
                        construct_type(
                            type_=AlreadyExists,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Brand]:
        """
        Fetch a specific brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Brand]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[BrandsResponse]:
        """
        Get the list of brands.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of brands.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BrandsResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "brands",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BrandsResponse,
                    construct_type(
                        type_=BrandsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, brand_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a brand by brand ID.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Conflict,
                        construct_type(
                            type_=Conflict,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def replace(
        self,
        brand_id: str,
        *,
        name: str,
        settings: typing.Optional[BrandSettings] = OMIT,
        snippets: typing.Optional[BrandSnippets] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Brand]:
        """
        Replace an existing brand with the supplied values.

        Parameters
        ----------
        brand_id : str
            A unique identifier associated with the brand you wish to update.

        name : str
            The name of the brand.

        settings : typing.Optional[BrandSettings]

        snippets : typing.Optional[BrandSnippets]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Brand]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"brands/{jsonable_encoder(brand_id)}",
            method="PUT",
            json={
                "name": name,
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=BrandSettings, direction="write"
                ),
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=BrandSnippets, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Brand,
                    construct_type(
                        type_=Brand,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
