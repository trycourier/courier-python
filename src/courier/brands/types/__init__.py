# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .brand import Brand
    from .brand_colors import BrandColors
    from .brand_get_all_response import BrandGetAllResponse
    from .brand_parameters import BrandParameters
    from .brand_settings import BrandSettings
    from .brand_snippet import BrandSnippet
    from .brand_snippets import BrandSnippets
    from .brands_response import BrandsResponse
_dynamic_imports: typing.Dict[str, str] = {
    "Brand": ".brand",
    "BrandColors": ".brand_colors",
    "BrandGetAllResponse": ".brand_get_all_response",
    "BrandParameters": ".brand_parameters",
    "BrandSettings": ".brand_settings",
    "BrandSnippet": ".brand_snippet",
    "BrandSnippets": ".brand_snippets",
    "BrandsResponse": ".brands_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Brand",
    "BrandColors",
    "BrandGetAllResponse",
    "BrandParameters",
    "BrandSettings",
    "BrandSnippet",
    "BrandSnippets",
    "BrandsResponse",
]
