# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawBulkClient, RawBulkClient
from .types.bulk_create_job_response import BulkCreateJobResponse
from .types.bulk_get_job_response import BulkGetJobResponse
from .types.bulk_get_job_users_response import BulkGetJobUsersResponse
from .types.bulk_ingest_users_params import BulkIngestUsersParams
from .types.inbound_bulk_message import InboundBulkMessage

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBulkClient
        """
        return self._raw_client

    def create_job(
        self,
        *,
        message: InboundBulkMessage,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkCreateJobResponse:
        """
        Parameters
        ----------
        message : InboundBulkMessage

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkCreateJobResponse

        Examples
        --------
        from courier import Courier
        from courier.bulk import InboundBulkMessage

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.bulk.create_job(
            message=InboundBulkMessage(),
        )
        """
        _response = self._raw_client.create_job(
            message=message,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def ingest_users(
        self,
        job_id: str,
        *,
        request: BulkIngestUsersParams,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ingest user data into a Bulk Job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        request : BulkIngestUsersParams

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.bulk import BulkIngestUsersParams, InboundBulkMessageUser

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.bulk.ingest_users(
            job_id="job_id",
            request=BulkIngestUsersParams(
                users=[InboundBulkMessageUser(), InboundBulkMessageUser()],
            ),
        )
        """
        _response = self._raw_client.ingest_users(
            job_id,
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def run_job(
        self,
        job_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Run a bulk job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.bulk.run_job(
            job_id="job_id",
        )
        """
        _response = self._raw_client.run_job(
            job_id,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def get_job(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BulkGetJobResponse:
        """
        Get a bulk job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkGetJobResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.bulk.get_job(
            job_id="job_id",
        )
        """
        _response = self._raw_client.get_job(job_id, request_options=request_options)
        return _response.data

    def get_users(
        self,
        job_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkGetJobUsersResponse:
        """
        Get Bulk Job Users

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of users added to the bulk job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkGetJobUsersResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.bulk.get_users(
            job_id="job_id",
        )
        """
        _response = self._raw_client.get_users(job_id, cursor=cursor, request_options=request_options)
        return _response.data


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBulkClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBulkClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBulkClient
        """
        return self._raw_client

    async def create_job(
        self,
        *,
        message: InboundBulkMessage,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkCreateJobResponse:
        """
        Parameters
        ----------
        message : InboundBulkMessage

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkCreateJobResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.bulk import InboundBulkMessage

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.bulk.create_job(
                message=InboundBulkMessage(),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_job(
            message=message,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def ingest_users(
        self,
        job_id: str,
        *,
        request: BulkIngestUsersParams,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ingest user data into a Bulk Job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        request : BulkIngestUsersParams

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.bulk import BulkIngestUsersParams, InboundBulkMessageUser

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.bulk.ingest_users(
                job_id="job_id",
                request=BulkIngestUsersParams(
                    users=[InboundBulkMessageUser(), InboundBulkMessageUser()],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.ingest_users(
            job_id,
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def run_job(
        self,
        job_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Run a bulk job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.bulk.run_job(
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.run_job(
            job_id,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def get_job(
        self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkGetJobResponse:
        """
        Get a bulk job

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkGetJobResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.bulk.get_job(
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_job(job_id, request_options=request_options)
        return _response.data

    async def get_users(
        self,
        job_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkGetJobUsersResponse:
        """
        Get Bulk Job Users

        Parameters
        ----------
        job_id : str
            A unique identifier representing the bulk job

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of users added to the bulk job

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkGetJobUsersResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.bulk.get_users(
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_users(job_id, cursor=cursor, request_options=request_options)
        return _response.data
