# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        AlreadyExists,
        BadRequest,
        BaseError,
        BaseTemplateTenantAssociation,
        ChannelClassification,
        ChannelPreference,
        Conflict,
        Email,
        ListTemplateTenantAssociation,
        MessageNotFound,
        NotFound,
        NotificationPreferenceDetails,
        NotificationPreferences,
        Paging,
        PaymentRequired,
        PreferenceStatus,
        RecipientPreferences,
        Rule,
        SingleTemplateTenantAssociation,
        TenantTemplateData,
        TenantTemplateDataNoContent,
        UserTenantAssociation,
    )
    from .errors import (
        AlreadyExistsError,
        BadRequestError,
        ConflictError,
        MessageNotFoundError,
        NotFoundError,
        PaymentRequiredError,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "AlreadyExists": ".types",
    "AlreadyExistsError": ".errors",
    "BadRequest": ".types",
    "BadRequestError": ".errors",
    "BaseError": ".types",
    "BaseTemplateTenantAssociation": ".types",
    "ChannelClassification": ".types",
    "ChannelPreference": ".types",
    "Conflict": ".types",
    "ConflictError": ".errors",
    "Email": ".types",
    "ListTemplateTenantAssociation": ".types",
    "MessageNotFound": ".types",
    "MessageNotFoundError": ".errors",
    "NotFound": ".types",
    "NotFoundError": ".errors",
    "NotificationPreferenceDetails": ".types",
    "NotificationPreferences": ".types",
    "Paging": ".types",
    "PaymentRequired": ".types",
    "PaymentRequiredError": ".errors",
    "PreferenceStatus": ".types",
    "RecipientPreferences": ".types",
    "Rule": ".types",
    "SingleTemplateTenantAssociation": ".types",
    "TenantTemplateData": ".types",
    "TenantTemplateDataNoContent": ".types",
    "UserTenantAssociation": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AlreadyExists",
    "AlreadyExistsError",
    "BadRequest",
    "BadRequestError",
    "BaseError",
    "BaseTemplateTenantAssociation",
    "ChannelClassification",
    "ChannelPreference",
    "Conflict",
    "ConflictError",
    "Email",
    "ListTemplateTenantAssociation",
    "MessageNotFound",
    "MessageNotFoundError",
    "NotFound",
    "NotFoundError",
    "NotificationPreferenceDetails",
    "NotificationPreferences",
    "Paging",
    "PaymentRequired",
    "PaymentRequiredError",
    "PreferenceStatus",
    "RecipientPreferences",
    "Rule",
    "SingleTemplateTenantAssociation",
    "TenantTemplateData",
    "TenantTemplateDataNoContent",
    "UserTenantAssociation",
]
