# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .already_exists_error import AlreadyExistsError
    from .bad_request_error import BadRequestError
    from .conflict_error import ConflictError
    from .message_not_found_error import MessageNotFoundError
    from .not_found_error import NotFoundError
    from .payment_required_error import PaymentRequiredError
_dynamic_imports: typing.Dict[str, str] = {
    "AlreadyExistsError": ".already_exists_error",
    "BadRequestError": ".bad_request_error",
    "ConflictError": ".conflict_error",
    "MessageNotFoundError": ".message_not_found_error",
    "NotFoundError": ".not_found_error",
    "PaymentRequiredError": ".payment_required_error",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AlreadyExistsError",
    "BadRequestError",
    "ConflictError",
    "MessageNotFoundError",
    "NotFoundError",
    "PaymentRequiredError",
]
