# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .already_exists import AlreadyExists
    from .bad_request import BadRequest
    from .base_error import BaseError
    from .base_template_tenant_association import BaseTemplateTenantAssociation
    from .channel_classification import ChannelClassification
    from .channel_preference import ChannelPreference
    from .conflict import Conflict
    from .email import Email
    from .list_template_tenant_association import ListTemplateTenantAssociation
    from .message_not_found import MessageNotFound
    from .not_found import NotFound
    from .notification_preference_details import NotificationPreferenceDetails
    from .notification_preferences import NotificationPreferences
    from .paging import Paging
    from .payment_required import PaymentRequired
    from .preference_status import PreferenceStatus
    from .recipient_preferences import RecipientPreferences
    from .rule import Rule
    from .single_template_tenant_association import SingleTemplateTenantAssociation
    from .tenant_template_data import TenantTemplateData
    from .tenant_template_data_no_content import TenantTemplateDataNoContent
    from .user_tenant_association import UserTenantAssociation
_dynamic_imports: typing.Dict[str, str] = {
    "AlreadyExists": ".already_exists",
    "BadRequest": ".bad_request",
    "BaseError": ".base_error",
    "BaseTemplateTenantAssociation": ".base_template_tenant_association",
    "ChannelClassification": ".channel_classification",
    "ChannelPreference": ".channel_preference",
    "Conflict": ".conflict",
    "Email": ".email",
    "ListTemplateTenantAssociation": ".list_template_tenant_association",
    "MessageNotFound": ".message_not_found",
    "NotFound": ".not_found",
    "NotificationPreferenceDetails": ".notification_preference_details",
    "NotificationPreferences": ".notification_preferences",
    "Paging": ".paging",
    "PaymentRequired": ".payment_required",
    "PreferenceStatus": ".preference_status",
    "RecipientPreferences": ".recipient_preferences",
    "Rule": ".rule",
    "SingleTemplateTenantAssociation": ".single_template_tenant_association",
    "TenantTemplateData": ".tenant_template_data",
    "TenantTemplateDataNoContent": ".tenant_template_data_no_content",
    "UserTenantAssociation": ".user_tenant_association",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AlreadyExists",
    "BadRequest",
    "BaseError",
    "BaseTemplateTenantAssociation",
    "ChannelClassification",
    "ChannelPreference",
    "Conflict",
    "Email",
    "ListTemplateTenantAssociation",
    "MessageNotFound",
    "NotFound",
    "NotificationPreferenceDetails",
    "NotificationPreferences",
    "Paging",
    "PaymentRequired",
    "PreferenceStatus",
    "RecipientPreferences",
    "Rule",
    "SingleTemplateTenantAssociation",
    "TenantTemplateData",
    "TenantTemplateDataNoContent",
    "UserTenantAssociation",
]
