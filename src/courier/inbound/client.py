# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawInboundClient, RawInboundClient
from .types.inbound_track_event import InboundTrackEvent
from .types.track_accepted_response import TrackAcceptedResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InboundClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInboundClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInboundClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInboundClient
        """
        return self._raw_client

    def track(
        self, *, request: InboundTrackEvent, request_options: typing.Optional[RequestOptions] = None
    ) -> TrackAcceptedResponse:
        """
        Parameters
        ----------
        request : InboundTrackEvent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrackAcceptedResponse

        Examples
        --------
        from courier import Courier
        from courier.inbound import InboundTrackEvent

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.inbound.track(
            request=InboundTrackEvent(
                event="New Order Placed",
                message_id="4c62c457-b329-4bea-9bfc-17bba86c393f",
                user_id="1234",
                properties={"order_id": 123, "total_orders": 5, "last_order_id": 122},
            ),
        )
        """
        _response = self._raw_client.track(request=request, request_options=request_options)
        return _response.data


class AsyncInboundClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInboundClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInboundClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInboundClient
        """
        return self._raw_client

    async def track(
        self, *, request: InboundTrackEvent, request_options: typing.Optional[RequestOptions] = None
    ) -> TrackAcceptedResponse:
        """
        Parameters
        ----------
        request : InboundTrackEvent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrackAcceptedResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.inbound import InboundTrackEvent

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.inbound.track(
                request=InboundTrackEvent(
                    event="New Order Placed",
                    message_id="4c62c457-b329-4bea-9bfc-17bba86c393f",
                    user_id="1234",
                    properties={
                        "order_id": 123,
                        "total_orders": 5,
                        "last_order_id": 122,
                    },
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.track(request=request, request_options=request_options)
        return _response.data
