# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.conflict_error import ConflictError
from ..commons.types.bad_request import BadRequest
from ..commons.types.conflict import Conflict
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from .types.inbound_track_event import InboundTrackEvent
from .types.track_accepted_response import TrackAcceptedResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawInboundClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def track(
        self, *, request: InboundTrackEvent, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[TrackAcceptedResponse]:
        """
        Parameters
        ----------
        request : InboundTrackEvent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TrackAcceptedResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "inbound/courier",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=InboundTrackEvent, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrackAcceptedResponse,
                    construct_type(
                        type_=TrackAcceptedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Conflict,
                        construct_type(
                            type_=Conflict,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawInboundClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def track(
        self, *, request: InboundTrackEvent, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[TrackAcceptedResponse]:
        """
        Parameters
        ----------
        request : InboundTrackEvent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TrackAcceptedResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "inbound/courier",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=InboundTrackEvent, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TrackAcceptedResponse,
                    construct_type(
                        type_=TrackAcceptedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Conflict,
                        construct_type(
                            type_=Conflict,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
