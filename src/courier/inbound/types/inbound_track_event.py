# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel


class InboundTrackEvent(UncheckedBaseModel):
    event: str = pydantic.Field()
    """
    A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.
    """

    message_id: typing_extensions.Annotated[str, FieldMetadata(alias="messageId")] = pydantic.Field()
    """
    A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status
    """

    properties: typing.Dict[str, typing.Optional[typing.Any]]
    type: typing.Literal["track"] = "track"
    user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userId")] = pydantic.Field(
        default=None
    )
    """
    The user id assocatiated with the track
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
