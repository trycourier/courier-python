# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.bad_request import BadRequest
from ..commons.types.not_found import NotFound
from ..commons.types.recipient_preferences import RecipientPreferences
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from .types.list_ import List
from .types.list_get_all_response import ListGetAllResponse
from .types.list_get_subscriptions_response import ListGetSubscriptionsResponse
from .types.list_put_params import ListPutParams
from .types.put_subscriptions_recipient import PutSubscriptionsRecipient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ListsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next page of lists.

        pattern : typing.Optional[str]
            "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetAllResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "lists", method="GET", params={"cursor": cursor, "pattern": pattern}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListGetAllResponse, construct_type(type_=ListGetAllResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get(
            list_id="list_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(List, construct_type(type_=List, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> List:
        """
        Create or replace an existing list with the supplied values.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request : ListPutParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        from courier import ListPutParams
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update(
            list_id="list_id",
            request=ListPutParams(
                name="name",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="PUT", json=request, request_options=request_options, omit=OMIT
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(List, construct_type(type_=List, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.delete(
            list_id="list_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.restore(
            list_id="list_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/restore", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of list subscriptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetSubscriptionsResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get_subscribers(
            list_id="list_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="GET",
            params={"cursor": cursor},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListGetSubscriptionsResponse, construct_type(type_=ListGetSubscriptionsResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import PutSubscriptionsRecipient
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update_subscribers(
            list_id="list_id",
            recipients=[
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="PUT",
            json={"recipients": recipients},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import PutSubscriptionsRecipient
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.add_subscribers(
            list_id="list_id",
            recipients=[
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="POST",
            json={"recipients": recipients},
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        preferences : typing.Optional[RecipientPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.subscribe(
            list_id="list_id",
            user_id="user_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            method="PUT",
            json={"preferences": preferences},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.unsubscribe(
            list_id="list_id",
            user_id="user_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncListsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next page of lists.

        pattern : typing.Optional[str]
            "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetAllResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "lists", method="GET", params={"cursor": cursor, "pattern": pattern}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListGetAllResponse, construct_type(type_=ListGetAllResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.get(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(List, construct_type(type_=List, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> List:
        """
        Create or replace an existing list with the supplied values.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request : ListPutParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        import asyncio

        from courier import ListPutParams
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.update(
                list_id="list_id",
                request=ListPutParams(
                    name="name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="PUT", json=request, request_options=request_options, omit=OMIT
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(List, construct_type(type_=List, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.delete(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.restore(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/restore", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of list subscriptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetSubscriptionsResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.get_subscribers(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="GET",
            params={"cursor": cursor},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(ListGetSubscriptionsResponse, construct_type(type_=ListGetSubscriptionsResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import PutSubscriptionsRecipient
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.update_subscribers(
                list_id="list_id",
                recipients=[
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="PUT",
            json={"recipients": recipients},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import PutSubscriptionsRecipient
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.add_subscribers(
                list_id="list_id",
                recipients=[
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions",
            method="POST",
            json={"recipients": recipients},
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        preferences : typing.Optional[RecipientPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.subscribe(
                list_id="list_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            method="PUT",
            json={"preferences": preferences},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.unsubscribe(
                list_id="list_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
