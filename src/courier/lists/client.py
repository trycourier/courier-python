# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.bad_request import BadRequest
from ..commons.types.not_found import NotFound
from ..commons.types.recipient_preferences import RecipientPreferences
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.remove_none_from_dict import remove_none_from_dict
from ..core.request_options import RequestOptions
from .types.list import List
from .types.list_get_all_response import ListGetAllResponse
from .types.list_get_subscriptions_response import ListGetSubscriptionsResponse
from .types.list_put_params import ListPutParams
from .types.put_subscriptions_recipient import PutSubscriptionsRecipient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ListsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters:
            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next page of lists.

            - pattern: typing.Optional[str]. "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.list(
            cursor="string",
            pattern="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "lists"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "cursor": cursor,
                        "pattern": pattern,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListGetAllResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get(
            list_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(List, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> List:
        """
        Create or replace an existing list with the supplied values.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: ListPutParams.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            ListPutParams,
            NotificationPreferenceDetails,
            RecipientPreferences,
            Rule,
        )
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update(
            list_id="string",
            request=ListPutParams(
                name="string",
                preferences=RecipientPreferences(
                    categories={
                        "string": NotificationPreferenceDetails(
                            status="OPTED_IN",
                            rules=[
                                Rule(
                                    start="string",
                                    until="string",
                                )
                            ],
                            channel_preferences=[
                                ChannelPreference(
                                    channel="direct_message",
                                )
                            ],
                        )
                    },
                    notifications={
                        "string": NotificationPreferenceDetails(
                            status="OPTED_IN",
                            rules=[
                                Rule(
                                    start="string",
                                    until="string",
                                )
                            ],
                            channel_preferences=[
                                ChannelPreference(
                                    channel="direct_message",
                                )
                            ],
                        )
                    },
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(List, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.delete(
            list_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.restore(
            list_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/restore"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next set of list subscriptions

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get_subscribers(
            list_id="string",
            cursor="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "cursor": cursor,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListGetSubscriptionsResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_subscribers(
        self,
        list_id: str,
        *,
        request: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: typing.Sequence[PutSubscriptionsRecipient].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            PutSubscriptionsRecipient,
            RecipientPreferences,
            Rule,
        )
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update_subscribers(
            list_id="string",
            request=[
                PutSubscriptionsRecipient(
                    recipient_id="string",
                    preferences=RecipientPreferences(
                        categories={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                        notifications={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                    ),
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_subscribers(
        self,
        list_id: str,
        *,
        request: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: typing.Sequence[PutSubscriptionsRecipient].

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[str]. The expiry can either be an ISO8601 datetime or a duration like "1 Day".

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            PutSubscriptionsRecipient,
            RecipientPreferences,
            Rule,
        )
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.add_subscribers(
            list_id="string",
            request=[
                PutSubscriptionsRecipient(
                    recipient_id="string",
                    preferences=RecipientPreferences(
                        categories={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                        notifications={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                    ),
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                        "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - user_id: str. A unique identifier representing the recipient associated with the list

            - preferences: typing.Optional[RecipientPreferences].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            RecipientPreferences,
            Rule,
        )
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.subscribe(
            list_id="string",
            user_id="string",
            preferences=RecipientPreferences(
                categories={
                    "string": NotificationPreferenceDetails(
                        status="OPTED_IN",
                        rules=[
                            Rule(
                                start="string",
                                until="string",
                            )
                        ],
                        channel_preferences=[
                            ChannelPreference(
                                channel="direct_message",
                            )
                        ],
                    )
                },
                notifications={
                    "string": NotificationPreferenceDetails(
                        status="OPTED_IN",
                        rules=[
                            Rule(
                                start="string",
                                until="string",
                            )
                        ],
                        channel_preferences=[
                            ChannelPreference(
                                channel="direct_message",
                            )
                        ],
                    )
                },
            ),
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if preferences is not OMIT:
            _request["preferences"] = preferences
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - user_id: str. A unique identifier representing the recipient associated with the list

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.unsubscribe(
            list_id="string",
            user_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncListsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters:
            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next page of lists.

            - pattern: typing.Optional[str]. "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.list(
            cursor="string",
            pattern="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "lists"),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "cursor": cursor,
                        "pattern": pattern,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListGetAllResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.get(
            list_id="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(List, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> List:
        """
        Create or replace an existing list with the supplied values.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: ListPutParams.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            ListPutParams,
            NotificationPreferenceDetails,
            RecipientPreferences,
            Rule,
        )
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.update(
            list_id="string",
            request=ListPutParams(
                name="string",
                preferences=RecipientPreferences(
                    categories={
                        "string": NotificationPreferenceDetails(
                            status="OPTED_IN",
                            rules=[
                                Rule(
                                    start="string",
                                    until="string",
                                )
                            ],
                            channel_preferences=[
                                ChannelPreference(
                                    channel="direct_message",
                                )
                            ],
                        )
                    },
                    notifications={
                        "string": NotificationPreferenceDetails(
                            status="OPTED_IN",
                            rules=[
                                Rule(
                                    start="string",
                                    until="string",
                                )
                            ],
                            channel_preferences=[
                                ChannelPreference(
                                    channel="direct_message",
                                )
                            ],
                        )
                    },
                ),
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(List, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.delete(
            list_id="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.restore(
            list_id="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/restore"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next set of list subscriptions

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.get_subscribers(
            list_id="string",
            cursor="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                remove_none_from_dict(
                    {
                        "cursor": cursor,
                        **(
                            request_options.get("additional_query_parameters", {})
                            if request_options is not None
                            else {}
                        ),
                    }
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListGetSubscriptionsResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_subscribers(
        self,
        list_id: str,
        *,
        request: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: typing.Sequence[PutSubscriptionsRecipient].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            PutSubscriptionsRecipient,
            RecipientPreferences,
            Rule,
        )
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.update_subscribers(
            list_id="string",
            request=[
                PutSubscriptionsRecipient(
                    recipient_id="string",
                    preferences=RecipientPreferences(
                        categories={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                        notifications={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                    ),
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_subscribers(
        self,
        list_id: str,
        *,
        request: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - request: typing.Sequence[PutSubscriptionsRecipient].

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[str]. The expiry can either be an ISO8601 datetime or a duration like "1 Day".

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            PutSubscriptionsRecipient,
            RecipientPreferences,
            Rule,
        )
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.add_subscribers(
            list_id="string",
            request=[
                PutSubscriptionsRecipient(
                    recipient_id="string",
                    preferences=RecipientPreferences(
                        categories={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                        notifications={
                            "string": NotificationPreferenceDetails(
                                status="OPTED_IN",
                                rules=[
                                    Rule(
                                        start="string",
                                        until="string",
                                    )
                                ],
                                channel_preferences=[
                                    ChannelPreference(
                                        channel="direct_message",
                                    )
                                ],
                            )
                        },
                    ),
                )
            ],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"lists/{jsonable_encoder(list_id)}/subscriptions"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                        "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - user_id: str. A unique identifier representing the recipient associated with the list

            - preferences: typing.Optional[RecipientPreferences].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier import (
            ChannelPreference,
            NotificationPreferenceDetails,
            RecipientPreferences,
            Rule,
        )
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.subscribe(
            list_id="string",
            user_id="string",
            preferences=RecipientPreferences(
                categories={
                    "string": NotificationPreferenceDetails(
                        status="OPTED_IN",
                        rules=[
                            Rule(
                                start="string",
                                until="string",
                            )
                        ],
                        channel_preferences=[
                            ChannelPreference(
                                channel="direct_message",
                            )
                        ],
                    )
                },
                notifications={
                    "string": NotificationPreferenceDetails(
                        status="OPTED_IN",
                        rules=[
                            Rule(
                                start="string",
                                until="string",
                            )
                        ],
                        channel_preferences=[
                            ChannelPreference(
                                channel="direct_message",
                            )
                        ],
                    )
                },
            ),
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if preferences is not OMIT:
            _request["preferences"] = preferences
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters:
            - list_id: str. A unique identifier representing the list you wish to retrieve.

            - user_id: str. A unique identifier representing the recipient associated with the list

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        await client.lists.unsubscribe(
            list_id="string",
            user_id="string",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/",
                f"lists/{jsonable_encoder(list_id)}/subscriptions/{jsonable_encoder(user_id)}",
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
