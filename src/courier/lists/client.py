# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.recipient_preferences import RecipientPreferences
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawListsClient, RawListsClient
from .types.list_ import List
from .types.list_get_all_response import ListGetAllResponse
from .types.list_get_subscriptions_response import ListGetSubscriptionsResponse
from .types.list_put_params import ListPutParams
from .types.put_subscriptions_recipient import PutSubscriptionsRecipient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ListsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawListsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawListsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawListsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next page of lists.

        pattern : typing.Optional[str]
            "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetAllResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.list()
        """
        _response = self._raw_client.list(cursor=cursor, pattern=pattern, request_options=request_options)
        return _response.data

    def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get(
            list_id="list_id",
        )
        """
        _response = self._raw_client.get(list_id, request_options=request_options)
        return _response.data

    def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Create or replace an existing list with the supplied values.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request : ListPutParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.lists import ListPutParams

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update(
            list_id="list_id",
            request=ListPutParams(
                name="name",
            ),
        )
        """
        _response = self._raw_client.update(list_id, request=request, request_options=request_options)
        return _response.data

    def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.delete(
            list_id="list_id",
        )
        """
        _response = self._raw_client.delete(list_id, request_options=request_options)
        return _response.data

    def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.restore(
            list_id="list_id",
        )
        """
        _response = self._raw_client.restore(list_id, request_options=request_options)
        return _response.data

    def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of list subscriptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetSubscriptionsResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.get_subscribers(
            list_id="list_id",
        )
        """
        _response = self._raw_client.get_subscribers(list_id, cursor=cursor, request_options=request_options)
        return _response.data

    def update_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.lists import PutSubscriptionsRecipient

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.update_subscribers(
            list_id="list_id",
            recipients=[
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
            ],
        )
        """
        _response = self._raw_client.update_subscribers(list_id, recipients=recipients, request_options=request_options)
        return _response.data

    def add_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.lists import PutSubscriptionsRecipient

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.add_subscribers(
            list_id="list_id",
            recipients=[
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
                PutSubscriptionsRecipient(
                    recipient_id="recipientId",
                ),
            ],
        )
        """
        _response = self._raw_client.add_subscribers(
            list_id,
            recipients=recipients,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        preferences : typing.Optional[RecipientPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.subscribe(
            list_id="list_id",
            user_id="user_id",
        )
        """
        _response = self._raw_client.subscribe(
            list_id, user_id, preferences=preferences, request_options=request_options
        )
        return _response.data

    def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.lists.unsubscribe(
            list_id="list_id",
            user_id="user_id",
        )
        """
        _response = self._raw_client.unsubscribe(list_id, user_id, request_options=request_options)
        return _response.data


class AsyncListsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawListsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawListsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawListsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        pattern: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetAllResponse:
        """
        Returns all of the lists, with the ability to filter based on a pattern.

        Parameters
        ----------
        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next page of lists.

        pattern : typing.Optional[str]
            "A pattern used to filter the list items returned. Pattern types supported: exact match on `list_id` or a pattern of one or more pattern parts. you may replace a part with either: `*` to match all parts in that position, or `**` to signify a wildcard `endsWith` pattern match."

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetAllResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(cursor=cursor, pattern=pattern, request_options=request_options)
        return _response.data

    async def get(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> List:
        """
        Returns a list based on the list ID provided.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        List

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.get(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(list_id, request_options=request_options)
        return _response.data

    async def update(
        self, list_id: str, *, request: ListPutParams, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Create or replace an existing list with the supplied values.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request : ListPutParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.lists import ListPutParams

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.update(
                list_id="list_id",
                request=ListPutParams(
                    name="name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(list_id, request=request, request_options=request_options)
        return _response.data

    async def delete(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a list by list ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.delete(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(list_id, request_options=request_options)
        return _response.data

    async def restore(self, list_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Restore a previously deleted list.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.restore(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.restore(list_id, request_options=request_options)
        return _response.data

    async def get_subscribers(
        self,
        list_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGetSubscriptionsResponse:
        """
        Get the list's subscriptions.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of list subscriptions

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGetSubscriptionsResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.get_subscribers(
                list_id="list_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_subscribers(list_id, cursor=cursor, request_options=request_options)
        return _response.data

    async def update_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.lists import PutSubscriptionsRecipient

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.update_subscribers(
                list_id="list_id",
                recipients=[
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_subscribers(
            list_id, recipients=recipients, request_options=request_options
        )
        return _response.data

    async def add_subscribers(
        self,
        list_id: str,
        *,
        recipients: typing.Sequence[PutSubscriptionsRecipient],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        recipients : typing.Sequence[PutSubscriptionsRecipient]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.lists import PutSubscriptionsRecipient

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.add_subscribers(
                list_id="list_id",
                recipients=[
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                    PutSubscriptionsRecipient(
                        recipient_id="recipientId",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_subscribers(
            list_id,
            recipients=recipients,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def subscribe(
        self,
        list_id: str,
        user_id: str,
        *,
        preferences: typing.Optional[RecipientPreferences] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        preferences : typing.Optional[RecipientPreferences]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.subscribe(
                list_id="list_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.subscribe(
            list_id, user_id, preferences=preferences, request_options=request_options
        )
        return _response.data

    async def unsubscribe(
        self, list_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a subscription to a list by list ID and user ID.

        Parameters
        ----------
        list_id : str
            A unique identifier representing the list you wish to retrieve.

        user_id : str
            A unique identifier representing the recipient associated with the list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.lists.unsubscribe(
                list_id="list_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.unsubscribe(list_id, user_id, request_options=request_options)
        return _response.data
