# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .list_ import List
    from .list_get_all_response import ListGetAllResponse
    from .list_get_subscriptions_response import ListGetSubscriptionsResponse
    from .list_put_params import ListPutParams
    from .list_subscription_recipient import ListSubscriptionRecipient
    from .put_subscriptions_recipient import PutSubscriptionsRecipient
_dynamic_imports: typing.Dict[str, str] = {
    "List": ".list_",
    "ListGetAllResponse": ".list_get_all_response",
    "ListGetSubscriptionsResponse": ".list_get_subscriptions_response",
    "ListPutParams": ".list_put_params",
    "ListSubscriptionRecipient": ".list_subscription_recipient",
    "PutSubscriptionsRecipient": ".put_subscriptions_recipient",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "List",
    "ListGetAllResponse",
    "ListGetSubscriptionsResponse",
    "ListPutParams",
    "ListSubscriptionRecipient",
    "PutSubscriptionsRecipient",
]
