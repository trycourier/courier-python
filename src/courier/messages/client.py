# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawMessagesClient, RawMessagesClient
from .types.list_messages_response import ListMessagesResponse
from .types.message_details import MessageDetails
from .types.message_details_extended import MessageDetailsExtended
from .types.message_history_response import MessageHistoryResponse
from .types.render_output_response import RenderOutputResponse


class MessagesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMessagesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMessagesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMessagesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        archived: typing.Optional[bool] = None,
        cursor: typing.Optional[str] = None,
        event: typing.Optional[str] = None,
        list_: typing.Optional[str] = None,
        message_id: typing.Optional[str] = None,
        notification: typing.Optional[str] = None,
        provider: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        recipient: typing.Optional[str] = None,
        status: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tags: typing.Optional[str] = None,
        tenant_id: typing.Optional[str] = None,
        enqueued_after: typing.Optional[str] = None,
        trace_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListMessagesResponse:
        """
        Fetch the statuses of messages you've previously sent.

        Parameters
        ----------
        archived : typing.Optional[bool]
            A boolean value that indicates whether archived messages should be included in the response.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of messages.

        event : typing.Optional[str]
            A unique identifier representing the event that was used to send the event.

        list_ : typing.Optional[str]
            A unique identifier representing the list the message was sent to.

        message_id : typing.Optional[str]
            A unique identifier representing the message_id returned from either /send or /send/list.

        notification : typing.Optional[str]
            A unique identifier representing the notification that was used to send the event.

        provider : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            The key assocated to the provider you want to filter on. E.g., sendgrid, inbox, twilio, slack, msteams, etc. Allows multiple values to be set in query parameters.

        recipient : typing.Optional[str]
            A unique identifier representing the recipient associated with the requested profile.

        status : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            An indicator of the current status of the message. Allows multiple values to be set in query parameters.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A tag placed in the metadata.tags during a notification send. Allows multiple values to be set in query parameters.

        tags : typing.Optional[str]
            A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.

        tenant_id : typing.Optional[str]
            Messages sent with the context of a Tenant

        enqueued_after : typing.Optional[str]
            The enqueued datetime of a message to filter out messages received before.

        trace_id : typing.Optional[str]
            The unique identifier used to trace the requests

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListMessagesResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.list()
        """
        _response = self._raw_client.list(
            archived=archived,
            cursor=cursor,
            event=event,
            list_=list_,
            message_id=message_id,
            notification=notification,
            provider=provider,
            recipient=recipient,
            status=status,
            tag=tag,
            tags=tags,
            tenant_id=tenant_id,
            enqueued_after=enqueued_after,
            trace_id=trace_id,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MessageDetailsExtended:
        """
        Fetch the status of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageDetailsExtended

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.get(
            message_id="message_id",
        )
        """
        _response = self._raw_client.get(message_id, request_options=request_options)
        return _response.data

    def cancel(
        self,
        message_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MessageDetails:
        """
        Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageDetails

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.cancel(
            message_id="message_id",
        )
        """
        _response = self._raw_client.cancel(
            message_id,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def get_history(
        self,
        message_id: str,
        *,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MessageHistoryResponse:
        """
        Fetch the array of events of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        type : typing.Optional[str]
            A supported Message History type that will filter the events returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageHistoryResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.get_history(
            message_id="message_id",
        )
        """
        _response = self._raw_client.get_history(message_id, type=type, request_options=request_options)
        return _response.data

    def get_content(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RenderOutputResponse:
        """
        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenderOutputResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.get_content(
            message_id="message_id",
        )
        """
        _response = self._raw_client.get_content(message_id, request_options=request_options)
        return _response.data

    def archive(self, request_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_id : str
            A unique identifier representing the request ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.messages.archive(
            request_id="request_id",
        )
        """
        _response = self._raw_client.archive(request_id, request_options=request_options)
        return _response.data


class AsyncMessagesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMessagesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMessagesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMessagesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        archived: typing.Optional[bool] = None,
        cursor: typing.Optional[str] = None,
        event: typing.Optional[str] = None,
        list_: typing.Optional[str] = None,
        message_id: typing.Optional[str] = None,
        notification: typing.Optional[str] = None,
        provider: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        recipient: typing.Optional[str] = None,
        status: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tags: typing.Optional[str] = None,
        tenant_id: typing.Optional[str] = None,
        enqueued_after: typing.Optional[str] = None,
        trace_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListMessagesResponse:
        """
        Fetch the statuses of messages you've previously sent.

        Parameters
        ----------
        archived : typing.Optional[bool]
            A boolean value that indicates whether archived messages should be included in the response.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of messages.

        event : typing.Optional[str]
            A unique identifier representing the event that was used to send the event.

        list_ : typing.Optional[str]
            A unique identifier representing the list the message was sent to.

        message_id : typing.Optional[str]
            A unique identifier representing the message_id returned from either /send or /send/list.

        notification : typing.Optional[str]
            A unique identifier representing the notification that was used to send the event.

        provider : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            The key assocated to the provider you want to filter on. E.g., sendgrid, inbox, twilio, slack, msteams, etc. Allows multiple values to be set in query parameters.

        recipient : typing.Optional[str]
            A unique identifier representing the recipient associated with the requested profile.

        status : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            An indicator of the current status of the message. Allows multiple values to be set in query parameters.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A tag placed in the metadata.tags during a notification send. Allows multiple values to be set in query parameters.

        tags : typing.Optional[str]
            A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.

        tenant_id : typing.Optional[str]
            Messages sent with the context of a Tenant

        enqueued_after : typing.Optional[str]
            The enqueued datetime of a message to filter out messages received before.

        trace_id : typing.Optional[str]
            The unique identifier used to trace the requests

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListMessagesResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            archived=archived,
            cursor=cursor,
            event=event,
            list_=list_,
            message_id=message_id,
            notification=notification,
            provider=provider,
            recipient=recipient,
            status=status,
            tag=tag,
            tags=tags,
            tenant_id=tenant_id,
            enqueued_after=enqueued_after,
            trace_id=trace_id,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MessageDetailsExtended:
        """
        Fetch the status of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageDetailsExtended

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.get(
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(message_id, request_options=request_options)
        return _response.data

    async def cancel(
        self,
        message_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MessageDetails:
        """
        Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageDetails

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.cancel(
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel(
            message_id,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def get_history(
        self,
        message_id: str,
        *,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MessageHistoryResponse:
        """
        Fetch the array of events of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        type : typing.Optional[str]
            A supported Message History type that will filter the events returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageHistoryResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.get_history(
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_history(message_id, type=type, request_options=request_options)
        return _response.data

    async def get_content(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RenderOutputResponse:
        """
        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenderOutputResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.get_content(
                message_id="message_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_content(message_id, request_options=request_options)
        return _response.data

    async def archive(self, request_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_id : str
            A unique identifier representing the request ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.messages.archive(
                request_id="request_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.archive(request_id, request_options=request_options)
        return _response.data
