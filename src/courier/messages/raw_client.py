# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.message_not_found_error import MessageNotFoundError
from ..commons.types.bad_request import BadRequest
from ..commons.types.message_not_found import MessageNotFound
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from .types.list_messages_response import ListMessagesResponse
from .types.message_details import MessageDetails
from .types.message_details_extended import MessageDetailsExtended
from .types.message_history_response import MessageHistoryResponse
from .types.render_output_response import RenderOutputResponse


class RawMessagesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        archived: typing.Optional[bool] = None,
        cursor: typing.Optional[str] = None,
        event: typing.Optional[str] = None,
        list_: typing.Optional[str] = None,
        message_id: typing.Optional[str] = None,
        notification: typing.Optional[str] = None,
        provider: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        recipient: typing.Optional[str] = None,
        status: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tags: typing.Optional[str] = None,
        tenant_id: typing.Optional[str] = None,
        enqueued_after: typing.Optional[str] = None,
        trace_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ListMessagesResponse]:
        """
        Fetch the statuses of messages you've previously sent.

        Parameters
        ----------
        archived : typing.Optional[bool]
            A boolean value that indicates whether archived messages should be included in the response.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of messages.

        event : typing.Optional[str]
            A unique identifier representing the event that was used to send the event.

        list_ : typing.Optional[str]
            A unique identifier representing the list the message was sent to.

        message_id : typing.Optional[str]
            A unique identifier representing the message_id returned from either /send or /send/list.

        notification : typing.Optional[str]
            A unique identifier representing the notification that was used to send the event.

        provider : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            The key assocated to the provider you want to filter on. E.g., sendgrid, inbox, twilio, slack, msteams, etc. Allows multiple values to be set in query parameters.

        recipient : typing.Optional[str]
            A unique identifier representing the recipient associated with the requested profile.

        status : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            An indicator of the current status of the message. Allows multiple values to be set in query parameters.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A tag placed in the metadata.tags during a notification send. Allows multiple values to be set in query parameters.

        tags : typing.Optional[str]
            A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.

        tenant_id : typing.Optional[str]
            Messages sent with the context of a Tenant

        enqueued_after : typing.Optional[str]
            The enqueued datetime of a message to filter out messages received before.

        trace_id : typing.Optional[str]
            The unique identifier used to trace the requests

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListMessagesResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "messages",
            method="GET",
            params={
                "archived": archived,
                "cursor": cursor,
                "event": event,
                "list": list_,
                "messageId": message_id,
                "notification": notification,
                "provider": provider,
                "recipient": recipient,
                "status": status,
                "tag": tag,
                "tags": tags,
                "tenant_id": tenant_id,
                "enqueued_after": enqueued_after,
                "traceId": trace_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListMessagesResponse,
                    construct_type(
                        type_=ListMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[MessageDetailsExtended]:
        """
        Fetch the status of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[MessageDetailsExtended]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageDetailsExtended,
                    construct_type(
                        type_=MessageDetailsExtended,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def cancel(
        self,
        message_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[MessageDetails]:
        """
        Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[MessageDetails]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/cancel",
            method="POST",
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageDetails,
                    construct_type(
                        type_=MessageDetails,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_history(
        self,
        message_id: str,
        *,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[MessageHistoryResponse]:
        """
        Fetch the array of events of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        type : typing.Optional[str]
            A supported Message History type that will filter the events returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[MessageHistoryResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/history",
            method="GET",
            params={
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageHistoryResponse,
                    construct_type(
                        type_=MessageHistoryResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_content(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[RenderOutputResponse]:
        """
        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[RenderOutputResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/output",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RenderOutputResponse,
                    construct_type(
                        type_=RenderOutputResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def archive(
        self, request_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        request_id : str
            A unique identifier representing the request ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"requests/{jsonable_encoder(request_id)}/archive",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawMessagesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        archived: typing.Optional[bool] = None,
        cursor: typing.Optional[str] = None,
        event: typing.Optional[str] = None,
        list_: typing.Optional[str] = None,
        message_id: typing.Optional[str] = None,
        notification: typing.Optional[str] = None,
        provider: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        recipient: typing.Optional[str] = None,
        status: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        tags: typing.Optional[str] = None,
        tenant_id: typing.Optional[str] = None,
        enqueued_after: typing.Optional[str] = None,
        trace_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ListMessagesResponse]:
        """
        Fetch the statuses of messages you've previously sent.

        Parameters
        ----------
        archived : typing.Optional[bool]
            A boolean value that indicates whether archived messages should be included in the response.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of messages.

        event : typing.Optional[str]
            A unique identifier representing the event that was used to send the event.

        list_ : typing.Optional[str]
            A unique identifier representing the list the message was sent to.

        message_id : typing.Optional[str]
            A unique identifier representing the message_id returned from either /send or /send/list.

        notification : typing.Optional[str]
            A unique identifier representing the notification that was used to send the event.

        provider : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            The key assocated to the provider you want to filter on. E.g., sendgrid, inbox, twilio, slack, msteams, etc. Allows multiple values to be set in query parameters.

        recipient : typing.Optional[str]
            A unique identifier representing the recipient associated with the requested profile.

        status : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            An indicator of the current status of the message. Allows multiple values to be set in query parameters.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A tag placed in the metadata.tags during a notification send. Allows multiple values to be set in query parameters.

        tags : typing.Optional[str]
            A comma delimited list of 'tags'. Messages will be returned if they match any of the tags passed in.

        tenant_id : typing.Optional[str]
            Messages sent with the context of a Tenant

        enqueued_after : typing.Optional[str]
            The enqueued datetime of a message to filter out messages received before.

        trace_id : typing.Optional[str]
            The unique identifier used to trace the requests

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListMessagesResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "messages",
            method="GET",
            params={
                "archived": archived,
                "cursor": cursor,
                "event": event,
                "list": list_,
                "messageId": message_id,
                "notification": notification,
                "provider": provider,
                "recipient": recipient,
                "status": status,
                "tag": tag,
                "tags": tags,
                "tenant_id": tenant_id,
                "enqueued_after": enqueued_after,
                "traceId": trace_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListMessagesResponse,
                    construct_type(
                        type_=ListMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[MessageDetailsExtended]:
        """
        Fetch the status of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[MessageDetailsExtended]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageDetailsExtended,
                    construct_type(
                        type_=MessageDetailsExtended,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def cancel(
        self,
        message_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[MessageDetails]:
        """
        Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[MessageDetails]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/cancel",
            method="POST",
            headers={
                "Idempotency-Key": str(idempotency_key) if idempotency_key is not None else None,
                "X-Idempotency-Expiration": str(idempotency_expiry) if idempotency_expiry is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageDetails,
                    construct_type(
                        type_=MessageDetails,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_history(
        self,
        message_id: str,
        *,
        type: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[MessageHistoryResponse]:
        """
        Fetch the array of events of a message you've previously sent.

        Parameters
        ----------
        message_id : str
            A unique identifier representing the message ID

        type : typing.Optional[str]
            A supported Message History type that will filter the events returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[MessageHistoryResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/history",
            method="GET",
            params={
                "type": type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MessageHistoryResponse,
                    construct_type(
                        type_=MessageHistoryResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_content(
        self, message_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[RenderOutputResponse]:
        """
        Parameters
        ----------
        message_id : str
            A unique identifier associated with the message you wish to retrieve (results from a send).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[RenderOutputResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/output",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    RenderOutputResponse,
                    construct_type(
                        type_=RenderOutputResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise MessageNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MessageNotFound,
                        construct_type(
                            type_=MessageNotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def archive(
        self, request_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        request_id : str
            A unique identifier representing the request ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"requests/{jsonable_encoder(request_id)}/archive",
            method="PUT",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
