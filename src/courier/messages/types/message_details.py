# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .message_status import MessageStatus
from .reason import Reason


class MessageDetails(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    A unique identifier associated with the message you wish to retrieve (results from a send).
    """

    status: MessageStatus = pydantic.Field()
    """
    The current status of the message.
    """

    enqueued: int = pydantic.Field()
    """
    A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.
    """

    sent: int = pydantic.Field()
    """
    A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.
    """

    delivered: int = pydantic.Field()
    """
    A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.
    """

    opened: int = pydantic.Field()
    """
    A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.
    """

    clicked: int = pydantic.Field()
    """
    A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.
    """

    recipient: str = pydantic.Field()
    """
    A unique identifier associated with the recipient of the delivered message.
    """

    event: str = pydantic.Field()
    """
    A unique identifier associated with the event of the delivered message.
    """

    notification: str = pydantic.Field()
    """
    A unique identifier associated with the notification of the delivered message.
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    A message describing the error that occurred.
    """

    reason: typing.Optional[Reason] = pydantic.Field(default=None)
    """
    The reason for the current status of the message.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
