# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        BaseCheck,
        BlockType,
        Check,
        CheckStatus,
        MessageRouting,
        MessageRoutingChannel,
        MessageRoutingMethod,
        Notification,
        NotificationBlock,
        NotificationChannel,
        NotificationChannelContent,
        NotificationContent,
        NotificationContentHierarchy,
        NotificationGetContentResponse,
        NotificationListResponse,
        NotificationTag,
        NotificationTagData,
        SubmissionChecksGetResponse,
        SubmissionChecksReplaceResponse,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "BaseCheck": ".types",
    "BlockType": ".types",
    "Check": ".types",
    "CheckStatus": ".types",
    "MessageRouting": ".types",
    "MessageRoutingChannel": ".types",
    "MessageRoutingMethod": ".types",
    "Notification": ".types",
    "NotificationBlock": ".types",
    "NotificationChannel": ".types",
    "NotificationChannelContent": ".types",
    "NotificationContent": ".types",
    "NotificationContentHierarchy": ".types",
    "NotificationGetContentResponse": ".types",
    "NotificationListResponse": ".types",
    "NotificationTag": ".types",
    "NotificationTagData": ".types",
    "SubmissionChecksGetResponse": ".types",
    "SubmissionChecksReplaceResponse": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BaseCheck",
    "BlockType",
    "Check",
    "CheckStatus",
    "MessageRouting",
    "MessageRoutingChannel",
    "MessageRoutingMethod",
    "Notification",
    "NotificationBlock",
    "NotificationChannel",
    "NotificationChannelContent",
    "NotificationContent",
    "NotificationContentHierarchy",
    "NotificationGetContentResponse",
    "NotificationListResponse",
    "NotificationTag",
    "NotificationTagData",
    "SubmissionChecksGetResponse",
    "SubmissionChecksReplaceResponse",
]
