# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type
from .types.base_check import BaseCheck
from .types.notification_get_content_response import NotificationGetContentResponse
from .types.notification_list_response import NotificationListResponse
from .types.submission_checks_get_response import SubmissionChecksGetResponse
from .types.submission_checks_replace_response import SubmissionChecksReplaceResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NotificationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationListResponse:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationListResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "notifications", method="GET", params={"cursor": cursor, "notes": notes}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationListResponse, construct_type(type_=NotificationListResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_content(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/content", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationGetContentResponse, construct_type(type_=NotificationGetContentResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_draft_content(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/draft/content", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationGetContentResponse, construct_type(type_=NotificationGetContentResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubmissionChecksGetResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksGetResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_submission_checks(
            id="id",
            submission_id="submissionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubmissionChecksGetResponse, construct_type(type_=SubmissionChecksGetResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubmissionChecksReplaceResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksReplaceResponse

        Examples
        --------
        from courier import BaseCheck
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.replace_submission_checks(
            id="id",
            submission_id="submissionId",
            checks=[
                BaseCheck(
                    id="id",
                    status="RESOLVED",
                ),
                BaseCheck(
                    id="id",
                    status="RESOLVED",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="PUT",
            json={"checks": checks},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubmissionChecksReplaceResponse, construct_type(type_=SubmissionChecksReplaceResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.cancel_submission(
            id="id",
            submission_id="submissionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNotificationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationListResponse:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationListResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "notifications", method="GET", params={"cursor": cursor, "notes": notes}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationListResponse, construct_type(type_=NotificationListResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_content(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/content", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationGetContentResponse, construct_type(type_=NotificationGetContentResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_draft_content(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/draft/content", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(NotificationGetContentResponse, construct_type(type_=NotificationGetContentResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubmissionChecksGetResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksGetResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_submission_checks(
                id="id",
                submission_id="submissionId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubmissionChecksGetResponse, construct_type(type_=SubmissionChecksGetResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubmissionChecksReplaceResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksReplaceResponse

        Examples
        --------
        import asyncio

        from courier import BaseCheck
        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.replace_submission_checks(
                id="id",
                submission_id="submissionId",
                checks=[
                    BaseCheck(
                        id="id",
                        status="RESOLVED",
                    ),
                    BaseCheck(
                        id="id",
                        status="RESOLVED",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="PUT",
            json={"checks": checks},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(SubmissionChecksReplaceResponse, construct_type(type_=SubmissionChecksReplaceResponse, object_=_response.json()))  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.cancel_submission(
                id="id",
                submission_id="submissionId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
