# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawNotificationsClient, RawNotificationsClient
from .types.base_check import BaseCheck
from .types.notification_get_content_response import NotificationGetContentResponse
from .types.notification_list_response import NotificationListResponse
from .types.submission_checks_get_response import SubmissionChecksGetResponse
from .types.submission_checks_replace_response import SubmissionChecksReplaceResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NotificationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNotificationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNotificationsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationListResponse:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationListResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.list()
        """
        _response = self._raw_client.list(cursor=cursor, notes=notes, request_options=request_options)
        return _response.data

    def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_content(
            id="id",
        )
        """
        _response = self._raw_client.get_content(id, request_options=request_options)
        return _response.data

    def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_draft_content(
            id="id",
        )
        """
        _response = self._raw_client.get_draft_content(id, request_options=request_options)
        return _response.data

    def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubmissionChecksGetResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksGetResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.get_submission_checks(
            id="id",
            submission_id="submissionId",
        )
        """
        _response = self._raw_client.get_submission_checks(id, submission_id, request_options=request_options)
        return _response.data

    def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubmissionChecksReplaceResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksReplaceResponse

        Examples
        --------
        from courier import Courier
        from courier.notifications import BaseCheck

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.replace_submission_checks(
            id="id",
            submission_id="submissionId",
            checks=[
                BaseCheck(
                    id="id",
                    status="RESOLVED",
                ),
                BaseCheck(
                    id="id",
                    status="RESOLVED",
                ),
            ],
        )
        """
        _response = self._raw_client.replace_submission_checks(
            id, submission_id, checks=checks, request_options=request_options
        )
        return _response.data

    def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.notifications.cancel_submission(
            id="id",
            submission_id="submissionId",
        )
        """
        _response = self._raw_client.cancel_submission(id, submission_id, request_options=request_options)
        return _response.data


class AsyncNotificationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNotificationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNotificationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNotificationsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> NotificationListResponse:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationListResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(cursor=cursor, notes=notes, request_options=request_options)
        return _response.data

    async def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_content(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_content(id, request_options=request_options)
        return _response.data

    async def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationGetContentResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationGetContentResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_draft_content(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_draft_content(id, request_options=request_options)
        return _response.data

    async def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SubmissionChecksGetResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksGetResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.get_submission_checks(
                id="id",
                submission_id="submissionId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_submission_checks(id, submission_id, request_options=request_options)
        return _response.data

    async def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubmissionChecksReplaceResponse:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubmissionChecksReplaceResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.notifications import BaseCheck

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.replace_submission_checks(
                id="id",
                submission_id="submissionId",
                checks=[
                    BaseCheck(
                        id="id",
                        status="RESOLVED",
                    ),
                    BaseCheck(
                        id="id",
                        status="RESOLVED",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.replace_submission_checks(
            id, submission_id, checks=checks, request_options=request_options
        )
        return _response.data

    async def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.notifications.cancel_submission(
                id="id",
                submission_id="submissionId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel_submission(id, submission_id, request_options=request_options)
        return _response.data
