# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from .types.base_check import BaseCheck
from .types.notification_get_content_response import NotificationGetContentResponse
from .types.notification_list_response import NotificationListResponse
from .types.submission_checks_get_response import SubmissionChecksGetResponse
from .types.submission_checks_replace_response import SubmissionChecksReplaceResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawNotificationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[NotificationListResponse]:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[NotificationListResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "notifications",
            method="GET",
            params={
                "cursor": cursor,
                "notes": notes,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationListResponse,
                    construct_type(
                        type_=NotificationListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[NotificationGetContentResponse]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[NotificationGetContentResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/content",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationGetContentResponse,
                    construct_type(
                        type_=NotificationGetContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[NotificationGetContentResponse]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[NotificationGetContentResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/draft/content",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationGetContentResponse,
                    construct_type(
                        type_=NotificationGetContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SubmissionChecksGetResponse]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SubmissionChecksGetResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SubmissionChecksGetResponse,
                    construct_type(
                        type_=SubmissionChecksGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SubmissionChecksReplaceResponse]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SubmissionChecksReplaceResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="PUT",
            json={
                "checks": convert_and_respect_annotation_metadata(
                    object_=checks, annotation=typing.Sequence[BaseCheck], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SubmissionChecksReplaceResponse,
                    construct_type(
                        type_=SubmissionChecksReplaceResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawNotificationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        cursor: typing.Optional[str] = None,
        notes: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[NotificationListResponse]:
        """
        Parameters
        ----------
        cursor : typing.Optional[str]

        notes : typing.Optional[bool]
            Retrieve the notes from the Notification template settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[NotificationListResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "notifications",
            method="GET",
            params={
                "cursor": cursor,
                "notes": notes,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationListResponse,
                    construct_type(
                        type_=NotificationListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[NotificationGetContentResponse]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[NotificationGetContentResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/content",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationGetContentResponse,
                    construct_type(
                        type_=NotificationGetContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_draft_content(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[NotificationGetContentResponse]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[NotificationGetContentResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/draft/content",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    NotificationGetContentResponse,
                    construct_type(
                        type_=NotificationGetContentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_submission_checks(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[SubmissionChecksGetResponse]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SubmissionChecksGetResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SubmissionChecksGetResponse,
                    construct_type(
                        type_=SubmissionChecksGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def replace_submission_checks(
        self,
        id: str,
        submission_id: str,
        *,
        checks: typing.Sequence[BaseCheck],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SubmissionChecksReplaceResponse]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        checks : typing.Sequence[BaseCheck]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SubmissionChecksReplaceResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="PUT",
            json={
                "checks": convert_and_respect_annotation_metadata(
                    object_=checks, annotation=typing.Sequence[BaseCheck], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SubmissionChecksReplaceResponse,
                    construct_type(
                        type_=SubmissionChecksReplaceResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def cancel_submission(
        self, id: str, submission_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        id : str

        submission_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"notifications/{jsonable_encoder(id)}/{jsonable_encoder(submission_id)}/checks",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
