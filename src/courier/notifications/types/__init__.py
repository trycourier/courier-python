# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .base_check import BaseCheck
    from .block_type import BlockType
    from .check import Check
    from .check_status import CheckStatus
    from .message_routing import MessageRouting
    from .message_routing_channel import MessageRoutingChannel
    from .message_routing_method import MessageRoutingMethod
    from .notification import Notification
    from .notification_block import NotificationBlock
    from .notification_channel import NotificationChannel
    from .notification_channel_content import NotificationChannelContent
    from .notification_content import NotificationContent
    from .notification_content_hierarchy import NotificationContentHierarchy
    from .notification_get_content_response import NotificationGetContentResponse
    from .notification_list_response import NotificationListResponse
    from .notification_tag import NotificationTag
    from .notification_tag_data import NotificationTagData
    from .submission_checks_get_response import SubmissionChecksGetResponse
    from .submission_checks_replace_response import SubmissionChecksReplaceResponse
_dynamic_imports: typing.Dict[str, str] = {
    "BaseCheck": ".base_check",
    "BlockType": ".block_type",
    "Check": ".check",
    "CheckStatus": ".check_status",
    "MessageRouting": ".message_routing",
    "MessageRoutingChannel": ".message_routing_channel",
    "MessageRoutingMethod": ".message_routing_method",
    "Notification": ".notification",
    "NotificationBlock": ".notification_block",
    "NotificationChannel": ".notification_channel",
    "NotificationChannelContent": ".notification_channel_content",
    "NotificationContent": ".notification_content",
    "NotificationContentHierarchy": ".notification_content_hierarchy",
    "NotificationGetContentResponse": ".notification_get_content_response",
    "NotificationListResponse": ".notification_list_response",
    "NotificationTag": ".notification_tag",
    "NotificationTagData": ".notification_tag_data",
    "SubmissionChecksGetResponse": ".submission_checks_get_response",
    "SubmissionChecksReplaceResponse": ".submission_checks_replace_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BaseCheck",
    "BlockType",
    "Check",
    "CheckStatus",
    "MessageRouting",
    "MessageRoutingChannel",
    "MessageRoutingMethod",
    "Notification",
    "NotificationBlock",
    "NotificationChannel",
    "NotificationChannelContent",
    "NotificationContent",
    "NotificationContentHierarchy",
    "NotificationGetContentResponse",
    "NotificationListResponse",
    "NotificationTag",
    "NotificationTagData",
    "SubmissionChecksGetResponse",
    "SubmissionChecksReplaceResponse",
]
