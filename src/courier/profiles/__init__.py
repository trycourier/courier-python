# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Address,
        AirshipProfile,
        AirshipProfileAudience,
        DeleteListSubscriptionResponse,
        DeviceType,
        Discord,
        Expo,
        GetListSubscriptionsList,
        GetListSubscriptionsResponse,
        Intercom,
        IntercomRecipient,
        MergeProfileResponse,
        MsTeams,
        MsTeamsBaseProperties,
        MultipleTokens,
        Pagerduty,
        ProfileGetParameters,
        ProfileGetResponse,
        ProfileUpdateRequest,
        ReplaceProfileResponse,
        SendDirectMessage,
        SendToChannel,
        SendToMsTeamsChannelId,
        SendToMsTeamsChannelName,
        SendToMsTeamsConversationId,
        SendToMsTeamsEmail,
        SendToMsTeamsUserId,
        SendToSlackChannel,
        SendToSlackEmail,
        SendToSlackUserId,
        Slack,
        SlackBaseProperties,
        SnoozeRule,
        SnoozeRuleType,
        SubscribeToListsRequest,
        SubscribeToListsRequestListObject,
        SubscribeToListsResponse,
        Token,
        UserProfile,
        UserProfileFirebaseToken,
        UserProfilePatch,
        WebhookAuthMode,
        WebhookAuthentication,
        WebhookMethod,
        WebhookProfile,
        WebhookProfileType,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "Address": ".types",
    "AirshipProfile": ".types",
    "AirshipProfileAudience": ".types",
    "DeleteListSubscriptionResponse": ".types",
    "DeviceType": ".types",
    "Discord": ".types",
    "Expo": ".types",
    "GetListSubscriptionsList": ".types",
    "GetListSubscriptionsResponse": ".types",
    "Intercom": ".types",
    "IntercomRecipient": ".types",
    "MergeProfileResponse": ".types",
    "MsTeams": ".types",
    "MsTeamsBaseProperties": ".types",
    "MultipleTokens": ".types",
    "Pagerduty": ".types",
    "ProfileGetParameters": ".types",
    "ProfileGetResponse": ".types",
    "ProfileUpdateRequest": ".types",
    "ReplaceProfileResponse": ".types",
    "SendDirectMessage": ".types",
    "SendToChannel": ".types",
    "SendToMsTeamsChannelId": ".types",
    "SendToMsTeamsChannelName": ".types",
    "SendToMsTeamsConversationId": ".types",
    "SendToMsTeamsEmail": ".types",
    "SendToMsTeamsUserId": ".types",
    "SendToSlackChannel": ".types",
    "SendToSlackEmail": ".types",
    "SendToSlackUserId": ".types",
    "Slack": ".types",
    "SlackBaseProperties": ".types",
    "SnoozeRule": ".types",
    "SnoozeRuleType": ".types",
    "SubscribeToListsRequest": ".types",
    "SubscribeToListsRequestListObject": ".types",
    "SubscribeToListsResponse": ".types",
    "Token": ".types",
    "UserProfile": ".types",
    "UserProfileFirebaseToken": ".types",
    "UserProfilePatch": ".types",
    "WebhookAuthMode": ".types",
    "WebhookAuthentication": ".types",
    "WebhookMethod": ".types",
    "WebhookProfile": ".types",
    "WebhookProfileType": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Address",
    "AirshipProfile",
    "AirshipProfileAudience",
    "DeleteListSubscriptionResponse",
    "DeviceType",
    "Discord",
    "Expo",
    "GetListSubscriptionsList",
    "GetListSubscriptionsResponse",
    "Intercom",
    "IntercomRecipient",
    "MergeProfileResponse",
    "MsTeams",
    "MsTeamsBaseProperties",
    "MultipleTokens",
    "Pagerduty",
    "ProfileGetParameters",
    "ProfileGetResponse",
    "ProfileUpdateRequest",
    "ReplaceProfileResponse",
    "SendDirectMessage",
    "SendToChannel",
    "SendToMsTeamsChannelId",
    "SendToMsTeamsChannelName",
    "SendToMsTeamsConversationId",
    "SendToMsTeamsEmail",
    "SendToMsTeamsUserId",
    "SendToSlackChannel",
    "SendToSlackEmail",
    "SendToSlackUserId",
    "Slack",
    "SlackBaseProperties",
    "SnoozeRule",
    "SnoozeRuleType",
    "SubscribeToListsRequest",
    "SubscribeToListsRequestListObject",
    "SubscribeToListsResponse",
    "Token",
    "UserProfile",
    "UserProfileFirebaseToken",
    "UserProfilePatch",
    "WebhookAuthMode",
    "WebhookAuthentication",
    "WebhookMethod",
    "WebhookProfile",
    "WebhookProfileType",
]
