# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawProfilesClient, RawProfilesClient
from .types.delete_list_subscription_response import DeleteListSubscriptionResponse
from .types.get_list_subscriptions_response import GetListSubscriptionsResponse
from .types.merge_profile_response import MergeProfileResponse
from .types.profile_get_response import ProfileGetResponse
from .types.profile_update_request import ProfileUpdateRequest
from .types.replace_profile_response import ReplaceProfileResponse
from .types.subscribe_to_lists_request import SubscribeToListsRequest
from .types.subscribe_to_lists_response import SubscribeToListsResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProfilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProfilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProfilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProfilesClient
        """
        return self._raw_client

    def get(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProfileGetResponse:
        """
        Returns the specified user profile.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileGetResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.get(
            user_id="user_id",
        )
        """
        _response = self._raw_client.get(user_id, request_options=request_options)
        return _response.data

    def create(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Optional[typing.Any]],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MergeProfileResponse:
        """
        Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        profile : typing.Dict[str, typing.Optional[typing.Any]]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MergeProfileResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.create(
            user_id="user_id",
            profile={"profile": {"key": "value"}},
        )
        """
        _response = self._raw_client.create(
            user_id,
            profile=profile,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def replace(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReplaceProfileResponse:
        """
        When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
        Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
        removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
        use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        profile : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReplaceProfileResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.replace(
            user_id="user_id",
            profile={"profile": {"key": "value"}},
        )
        """
        _response = self._raw_client.replace(user_id, profile=profile, request_options=request_options)
        return _response.data

    def merge_profile(
        self, user_id: str, *, request: ProfileUpdateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request : ProfileUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.profiles import ProfileUpdateRequest, UserProfilePatch

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.merge_profile(
            user_id="user_id",
            request=ProfileUpdateRequest(
                patch=[
                    UserProfilePatch(
                        op="op",
                        path="path",
                        value="value",
                    ),
                    UserProfilePatch(
                        op="op",
                        path="path",
                        value="value",
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.merge_profile(user_id, request=request, request_options=request_options)
        return _response.data

    def delete(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified user profile.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.delete(
            user_id="user_id",
        )
        """
        _response = self._raw_client.delete(user_id, request_options=request_options)
        return _response.data

    def get_list_subscriptions(
        self,
        user_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetListSubscriptionsResponse:
        """
        Returns the subscribed lists for a specified user.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of message statuses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetListSubscriptionsResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.get_list_subscriptions(
            user_id="user_id",
        )
        """
        _response = self._raw_client.get_list_subscriptions(user_id, cursor=cursor, request_options=request_options)
        return _response.data

    def subscribe_to_lists(
        self,
        user_id: str,
        *,
        request: SubscribeToListsRequest,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscribeToListsResponse:
        """
        Subscribes the given user to one or more lists. If the list does not exist, it will be created.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request : SubscribeToListsRequest

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscribeToListsResponse

        Examples
        --------
        from courier import Courier
        from courier.profiles import (
            SubscribeToListsRequest,
            SubscribeToListsRequestListObject,
        )

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.subscribe_to_lists(
            user_id="user_id",
            request=SubscribeToListsRequest(
                lists=[
                    SubscribeToListsRequestListObject(
                        list_id="listId",
                    ),
                    SubscribeToListsRequestListObject(
                        list_id="listId",
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.subscribe_to_lists(
            user_id,
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    def delete_list_subscription(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteListSubscriptionResponse:
        """
        Removes all list subscriptions for given user.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteListSubscriptionResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.profiles.delete_list_subscription(
            user_id="user_id",
        )
        """
        _response = self._raw_client.delete_list_subscription(user_id, request_options=request_options)
        return _response.data


class AsyncProfilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProfilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProfilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProfilesClient
        """
        return self._raw_client

    async def get(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProfileGetResponse:
        """
        Returns the specified user profile.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileGetResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.get(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(user_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Optional[typing.Any]],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MergeProfileResponse:
        """
        Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        profile : typing.Dict[str, typing.Optional[typing.Any]]

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MergeProfileResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.create(
                user_id="user_id",
                profile={"profile": {"key": "value"}},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            user_id,
            profile=profile,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def replace(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReplaceProfileResponse:
        """
        When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
        Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
        removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
        use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        profile : typing.Dict[str, typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReplaceProfileResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.replace(
                user_id="user_id",
                profile={"profile": {"key": "value"}},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.replace(user_id, profile=profile, request_options=request_options)
        return _response.data

    async def merge_profile(
        self, user_id: str, *, request: ProfileUpdateRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request : ProfileUpdateRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.profiles import ProfileUpdateRequest, UserProfilePatch

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.merge_profile(
                user_id="user_id",
                request=ProfileUpdateRequest(
                    patch=[
                        UserProfilePatch(
                            op="op",
                            path="path",
                            value="value",
                        ),
                        UserProfilePatch(
                            op="op",
                            path="path",
                            value="value",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.merge_profile(user_id, request=request, request_options=request_options)
        return _response.data

    async def delete(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes the specified user profile.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.delete(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(user_id, request_options=request_options)
        return _response.data

    async def get_list_subscriptions(
        self,
        user_id: str,
        *,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetListSubscriptionsResponse:
        """
        Returns the subscribed lists for a specified user.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        cursor : typing.Optional[str]
            A unique identifier that allows for fetching the next set of message statuses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetListSubscriptionsResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.get_list_subscriptions(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_list_subscriptions(
            user_id, cursor=cursor, request_options=request_options
        )
        return _response.data

    async def subscribe_to_lists(
        self,
        user_id: str,
        *,
        request: SubscribeToListsRequest,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SubscribeToListsResponse:
        """
        Subscribes the given user to one or more lists. If the list does not exist, it will be created.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request : SubscribeToListsRequest

        idempotency_key : typing.Optional[str]

        idempotency_expiry : typing.Optional[str]
            The expiry can either be an ISO8601 datetime or a duration like "1 Day".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubscribeToListsResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.profiles import (
            SubscribeToListsRequest,
            SubscribeToListsRequestListObject,
        )

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.subscribe_to_lists(
                user_id="user_id",
                request=SubscribeToListsRequest(
                    lists=[
                        SubscribeToListsRequestListObject(
                            list_id="listId",
                        ),
                        SubscribeToListsRequestListObject(
                            list_id="listId",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.subscribe_to_lists(
            user_id,
            request=request,
            idempotency_key=idempotency_key,
            idempotency_expiry=idempotency_expiry,
            request_options=request_options,
        )
        return _response.data

    async def delete_list_subscription(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteListSubscriptionResponse:
        """
        Removes all list subscriptions for given user.

        Parameters
        ----------
        user_id : str
            A unique identifier representing the user associated with the requested profile.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteListSubscriptionResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.profiles.delete_list_subscription(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_list_subscription(user_id, request_options=request_options)
        return _response.data
