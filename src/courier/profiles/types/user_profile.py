# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel
from .address import Address
from .airship_profile import AirshipProfile
from .discord import Discord
from .expo import Expo
from .intercom import Intercom
from .ms_teams import MsTeams
from .slack import Slack
from .user_profile_firebase_token import UserProfileFirebaseToken


class UserProfile(UncheckedBaseModel):
    address: Address
    birthdate: str
    email: str
    email_verified: bool
    family_name: str
    gender: str
    given_name: str
    locale: str
    middle_name: str
    name: str
    nickname: str
    phone_number: str
    phone_number_verified: bool
    picture: str
    preferred_name: str
    profile: str
    sub: str
    updated_at: str
    website: str
    zoneinfo: str
    custom: typing.Optional[typing.Any] = pydantic.Field(default=None)
    """
    A free form object. Due to a limitation of the API Explorer, you can only enter string key/values below, but this API accepts more complex object structures.
    """

    airship: AirshipProfile
    apn: str
    target_arn: str
    discord: Discord
    expo: Expo
    facebook_psid: typing_extensions.Annotated[str, FieldMetadata(alias="facebookPSID")]
    firebase_token: typing_extensions.Annotated[UserProfileFirebaseToken, FieldMetadata(alias="firebaseToken")]
    intercom: Intercom
    slack: Slack
    ms_teams: MsTeams

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
