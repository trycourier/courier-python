# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.bad_request import BadRequest
from .types.bulk_create_job_response import BulkCreateJobResponse
from .types.bulk_get_job_response import BulkGetJobResponse
from .types.bulk_get_job_users_response import BulkGetJobUsersResponse
from .types.bulk_ingest_users_params import BulkIngestUsersParams
from .types.inbound_bulk_message import InboundBulkMessage

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_job(
        self,
        *,
        message: InboundBulkMessage,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> BulkCreateJobResponse:
        """
        Parameters:
            - message: InboundBulkMessage.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "bulk"),
            json=jsonable_encoder({"message": message}),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkCreateJobResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ingest_users(
        self,
        job_id: str,
        *,
        request: BulkIngestUsersParams,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> None:
        """
        Ingest user data into a Bulk Job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job

            - request: BulkIngestUsersParams.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def run_job(
        self,
        job_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> None:
        """
        Run a bulk job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}/run"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_job(self, job_id: str) -> BulkGetJobResponse:
        """
        Get a bulk job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkGetJobResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_users(self, job_id: str) -> BulkGetJobUsersResponse:
        """
        Get Bulk Job Users

        Parameters:
            - job_id: str. A unique identifier representing the bulk job
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}/users"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkGetJobUsersResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_job(
        self,
        *,
        message: InboundBulkMessage,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> BulkCreateJobResponse:
        """
        Parameters:
            - message: InboundBulkMessage.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "bulk"),
            json=jsonable_encoder({"message": message}),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkCreateJobResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ingest_users(
        self,
        job_id: str,
        *,
        request: BulkIngestUsersParams,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> None:
        """
        Ingest user data into a Bulk Job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job

            - request: BulkIngestUsersParams.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def run_job(
        self,
        job_id: str,
        *,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> None:
        """
        Run a bulk job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}/run"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_job(self, job_id: str) -> BulkGetJobResponse:
        """
        Get a bulk job

        Parameters:
            - job_id: str. A unique identifier representing the bulk job
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkGetJobResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_users(self, job_id: str) -> BulkGetJobUsersResponse:
        """
        Get Bulk Job Users

        Parameters:
            - job_id: str. A unique identifier representing the bulk job
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"bulk/{job_id}/users"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(BulkGetJobUsersResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
