# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class Reason(str, enum.Enum):
    FILTERED = "FILTERED"
    """
    The recipient did not receive the notification because of a condition that passed.
    """

    NO_CHANNELS = "NO_CHANNELS"
    """
    The notification did not contain any valid channels.
    """

    NO_PROVIDERS = "NO_PROVIDERS"
    """
    The notification did not contain a configured provider for a channel.
    """

    PROVIDER_ERROR = "PROVIDER_ERROR"
    """
    The Integration provider had an error when sending a notification.
    """

    UNPUBLISHED = "UNPUBLISHED"
    """
    The notification hasn't been published yet.
    """

    UNSUBSCRIBED = "UNSUBSCRIBED"
    """
    The recipient did not receive the notification because they chose to unsubscribe from it.
    """

    def visit(
        self,
        filtered: typing.Callable[[], T_Result],
        no_channels: typing.Callable[[], T_Result],
        no_providers: typing.Callable[[], T_Result],
        provider_error: typing.Callable[[], T_Result],
        unpublished: typing.Callable[[], T_Result],
        unsubscribed: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is Reason.FILTERED:
            return filtered()
        if self is Reason.NO_CHANNELS:
            return no_channels()
        if self is Reason.NO_PROVIDERS:
            return no_providers()
        if self is Reason.PROVIDER_ERROR:
            return provider_error()
        if self is Reason.UNPUBLISHED:
            return unpublished()
        if self is Reason.UNSUBSCRIBED:
            return unsubscribed()
