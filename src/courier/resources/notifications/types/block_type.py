# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class BlockType(str, enum.Enum):
    ACTION = "action"
    DIVIDER = "divider"
    IMAGE = "image"
    JSONNET = "jsonnet"
    LIST = "list"
    MARKDOWN = "markdown"
    QUOTE = "quote"
    TEMPLATE = "template"
    TEXT = "text"

    def visit(
        self,
        action: typing.Callable[[], T_Result],
        divider: typing.Callable[[], T_Result],
        image: typing.Callable[[], T_Result],
        jsonnet: typing.Callable[[], T_Result],
        list: typing.Callable[[], T_Result],
        markdown: typing.Callable[[], T_Result],
        quote: typing.Callable[[], T_Result],
        template: typing.Callable[[], T_Result],
        text: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is BlockType.ACTION:
            return action()
        if self is BlockType.DIVIDER:
            return divider()
        if self is BlockType.IMAGE:
            return image()
        if self is BlockType.JSONNET:
            return jsonnet()
        if self is BlockType.LIST:
            return list()
        if self is BlockType.MARKDOWN:
            return markdown()
        if self is BlockType.QUOTE:
            return quote()
        if self is BlockType.TEMPLATE:
            return template()
        if self is BlockType.TEXT:
            return text()
