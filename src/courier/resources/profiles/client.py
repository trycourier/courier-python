# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.bad_request import BadRequest
from .types.delete_list_subscription_response import DeleteListSubscriptionResponse
from .types.get_list_subscriptions_response import GetListSubscriptionsResponse
from .types.merge_profile_response import MergeProfileResponse
from .types.profile_get_response import ProfileGetResponse
from .types.replace_profile_response import ReplaceProfileResponse
from .types.subscribe_to_lists_request import SubscribeToListsRequest
from .types.subscribe_to_lists_response import SubscribeToListsResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProfilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, user_id: str) -> ProfileGetResponse:
        """
        Returns the specified user profile.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProfileGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Any],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> MergeProfileResponse:
        """
        Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - profile: typing.Dict[str, typing.Any].

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            json=jsonable_encoder({"profile": profile}),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MergeProfileResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def replace(self, user_id: str, *, profile: typing.Dict[str, typing.Any]) -> ReplaceProfileResponse:
        """
        When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
        Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
        removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
        use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - profile: typing.Dict[str, typing.Any].
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            json=jsonable_encoder({"profile": profile}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ReplaceProfileResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, user_id: str) -> None:
        """
        Deletes the specified user profile.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_list_subscriptions(
        self, user_id: str, *, cursor: typing.Optional[str] = None
    ) -> GetListSubscriptionsResponse:
        """
        Returns the subscribed lists for a specified user.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next set of message statuses.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            params=remove_none_from_dict({"cursor": cursor}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetListSubscriptionsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def subscribe_to_lists(
        self,
        user_id: str,
        *,
        request: SubscribeToListsRequest,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> SubscribeToListsResponse:
        """
        Subscribes the given user to one or more lists. If the list does not exist, it will be created.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - request: SubscribeToListsRequest.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SubscribeToListsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_list_subscription(self, user_id: str) -> DeleteListSubscriptionResponse:
        """
        Removes all list subscriptions for given user.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteListSubscriptionResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProfilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, user_id: str) -> ProfileGetResponse:
        """
        Returns the specified user profile.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProfileGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        user_id: str,
        *,
        profile: typing.Dict[str, typing.Any],
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> MergeProfileResponse:
        """
        Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - profile: typing.Dict[str, typing.Any].

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            json=jsonable_encoder({"profile": profile}),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(MergeProfileResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def replace(self, user_id: str, *, profile: typing.Dict[str, typing.Any]) -> ReplaceProfileResponse:
        """
        When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
        Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
        removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
        use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - profile: typing.Dict[str, typing.Any].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            json=jsonable_encoder({"profile": profile}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ReplaceProfileResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, user_id: str) -> None:
        """
        Deletes the specified user profile.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_list_subscriptions(
        self, user_id: str, *, cursor: typing.Optional[str] = None
    ) -> GetListSubscriptionsResponse:
        """
        Returns the subscribed lists for a specified user.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - cursor: typing.Optional[str]. A unique identifier that allows for fetching the next set of message statuses.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            params=remove_none_from_dict({"cursor": cursor}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetListSubscriptionsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def subscribe_to_lists(
        self,
        user_id: str,
        *,
        request: SubscribeToListsRequest,
        idempotency_key: typing.Optional[str] = None,
        idempotency_expiry: typing.Optional[int] = None,
    ) -> SubscribeToListsResponse:
        """
        Subscribes the given user to one or more lists. If the list does not exist, it will be created.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.

            - request: SubscribeToListsRequest.

            - idempotency_key: typing.Optional[str].

            - idempotency_expiry: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "Idempotency-Key": idempotency_key,
                    "X-Idempotency-Expiration": idempotency_expiry,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SubscribeToListsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_list_subscription(self, user_id: str) -> DeleteListSubscriptionResponse:
        """
        Removes all list subscriptions for given user.

        Parameters:
            - user_id: str. A unique identifier representing the user associated with the requested profile.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"profiles/{user_id}/lists"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteListSubscriptionResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
