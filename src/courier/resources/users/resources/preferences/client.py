# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from ....commons.errors.bad_request_error import BadRequestError
from ....commons.errors.not_found_error import NotFoundError
from ....commons.types.bad_request import BadRequest
from ....commons.types.channel_classification import ChannelClassification
from ....commons.types.not_found import NotFound
from ....commons.types.preference_status import PreferenceStatus
from .types.user_preferences_get_response import UserPreferencesGetResponse
from .types.user_preferences_list_response import UserPreferencesListResponse
from .types.user_preferences_update_response import UserPreferencesUpdateResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PreferencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, user_id: str) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, user_id: str, topic_id: str) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.

            - topic_id: str. A unique identifier associated with a subscription topic.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences/{topic_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        status: PreferenceStatus,
        custom_routing: typing.Optional[typing.List[ChannelClassification]] = OMIT,
        default_status: PreferenceStatus,
        has_custom_routing: typing.Optional[bool] = OMIT,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.

            - topic_id: str. A unique identifier associated with a subscription topic.

            - status: PreferenceStatus.

            - custom_routing: typing.Optional[typing.List[ChannelClassification]]. The Channels a user has chosen to receive notifications through for this topic

            - default_status: PreferenceStatus.

            - has_custom_routing: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"status": status.value, "default_status": default_status.value}
        if custom_routing is not OMIT:
            _request["custom_routing"] = custom_routing
        if has_custom_routing is not OMIT:
            _request["has_custom_routing"] = has_custom_routing
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences/{topic_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPreferencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, user_id: str) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, user_id: str, topic_id: str) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.

            - topic_id: str. A unique identifier associated with a subscription topic.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences/{topic_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(NotFound, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        status: PreferenceStatus,
        custom_routing: typing.Optional[typing.List[ChannelClassification]] = OMIT,
        default_status: PreferenceStatus,
        has_custom_routing: typing.Optional[bool] = OMIT,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters:
            - user_id: str. A unique identifier associated with the user whose preferences you wish to retrieve.

            - topic_id: str. A unique identifier associated with a subscription topic.

            - status: PreferenceStatus.

            - custom_routing: typing.Optional[typing.List[ChannelClassification]]. The Channels a user has chosen to receive notifications through for this topic

            - default_status: PreferenceStatus.

            - has_custom_routing: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"status": status.value, "default_status": default_status.value}
        if custom_routing is not OMIT:
            _request["custom_routing"] = custom_routing
        if has_custom_routing is not OMIT:
            _request["has_custom_routing"] = has_custom_routing
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"users/{user_id}/preferences/{topic_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UserPreferencesUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(BadRequest, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
