# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Attachment,
        AudienceFilter,
        AudienceRecipient,
        BaseMessage,
        BaseMessageSendTo,
        BaseSocialPresence,
        BrandSettingsEmail,
        BrandSettingsInApp,
        BrandSettingsSocialPresence,
        BrandTemplate,
        BrandTemplateOverride,
        Channel,
        ChannelMetadata,
        ChannelSource,
        Content,
        ContentMessage,
        Criteria,
        Delay,
        ElementalActionNode,
        ElementalBaseNode,
        ElementalChannelNode,
        ElementalContent,
        ElementalContentSugar,
        ElementalDividerNode,
        ElementalGroupNode,
        ElementalImageNode,
        ElementalMetaNode,
        ElementalNode,
        ElementalNode_Action,
        ElementalNode_Channel,
        ElementalNode_Divider,
        ElementalNode_Group,
        ElementalNode_Image,
        ElementalNode_Meta,
        ElementalNode_Quote,
        ElementalNode_Text,
        ElementalQuoteNode,
        ElementalTextNode,
        EmailFooter,
        EmailHead,
        EmailHeader,
        ExpiresInType,
        Expiry,
        IActionButtonStyle,
        IAlignment,
        IPreferences,
        IProfilePreferences,
        Icons,
        InAppPlacement,
        InvalidListPatternRecipient,
        InvalidListRecipient,
        InvalidUserRecipient,
        ListFilter,
        ListPatternRecipient,
        ListPatternRecipientType,
        ListRecipient,
        ListRecipientType,
        Locale,
        Locales,
        Logo,
        Message,
        MessageChannels,
        MessageContext,
        MessageData,
        MessageMetadata,
        MessagePreferences,
        MessageProviders,
        MessageProvidersType,
        MessageRecipient,
        Metadata,
        MsTeamsRecipient,
        PagerdutyRecipient,
        Preference,
        Preferences,
        Recipient,
        RecipientData,
        Routing,
        RoutingMethod,
        RuleType,
        SlackRecipient,
        TemplateMessage,
        TextAlign,
        TextStyle,
        Timeout,
        Timeouts,
        TrackingOverride,
        UserRecipient,
        UserRecipientType,
        Utm,
        WebhookRecipient,
        WidgetBackground,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "Attachment": ".types",
    "AudienceFilter": ".types",
    "AudienceRecipient": ".types",
    "BaseMessage": ".types",
    "BaseMessageSendTo": ".types",
    "BaseSocialPresence": ".types",
    "BrandSettingsEmail": ".types",
    "BrandSettingsInApp": ".types",
    "BrandSettingsSocialPresence": ".types",
    "BrandTemplate": ".types",
    "BrandTemplateOverride": ".types",
    "Channel": ".types",
    "ChannelMetadata": ".types",
    "ChannelSource": ".types",
    "Content": ".types",
    "ContentMessage": ".types",
    "Criteria": ".types",
    "Delay": ".types",
    "ElementalActionNode": ".types",
    "ElementalBaseNode": ".types",
    "ElementalChannelNode": ".types",
    "ElementalContent": ".types",
    "ElementalContentSugar": ".types",
    "ElementalDividerNode": ".types",
    "ElementalGroupNode": ".types",
    "ElementalImageNode": ".types",
    "ElementalMetaNode": ".types",
    "ElementalNode": ".types",
    "ElementalNode_Action": ".types",
    "ElementalNode_Channel": ".types",
    "ElementalNode_Divider": ".types",
    "ElementalNode_Group": ".types",
    "ElementalNode_Image": ".types",
    "ElementalNode_Meta": ".types",
    "ElementalNode_Quote": ".types",
    "ElementalNode_Text": ".types",
    "ElementalQuoteNode": ".types",
    "ElementalTextNode": ".types",
    "EmailFooter": ".types",
    "EmailHead": ".types",
    "EmailHeader": ".types",
    "ExpiresInType": ".types",
    "Expiry": ".types",
    "IActionButtonStyle": ".types",
    "IAlignment": ".types",
    "IPreferences": ".types",
    "IProfilePreferences": ".types",
    "Icons": ".types",
    "InAppPlacement": ".types",
    "InvalidListPatternRecipient": ".types",
    "InvalidListRecipient": ".types",
    "InvalidUserRecipient": ".types",
    "ListFilter": ".types",
    "ListPatternRecipient": ".types",
    "ListPatternRecipientType": ".types",
    "ListRecipient": ".types",
    "ListRecipientType": ".types",
    "Locale": ".types",
    "Locales": ".types",
    "Logo": ".types",
    "Message": ".types",
    "MessageChannels": ".types",
    "MessageContext": ".types",
    "MessageData": ".types",
    "MessageMetadata": ".types",
    "MessagePreferences": ".types",
    "MessageProviders": ".types",
    "MessageProvidersType": ".types",
    "MessageRecipient": ".types",
    "Metadata": ".types",
    "MsTeamsRecipient": ".types",
    "PagerdutyRecipient": ".types",
    "Preference": ".types",
    "Preferences": ".types",
    "Recipient": ".types",
    "RecipientData": ".types",
    "Routing": ".types",
    "RoutingMethod": ".types",
    "RuleType": ".types",
    "SlackRecipient": ".types",
    "TemplateMessage": ".types",
    "TextAlign": ".types",
    "TextStyle": ".types",
    "Timeout": ".types",
    "Timeouts": ".types",
    "TrackingOverride": ".types",
    "UserRecipient": ".types",
    "UserRecipientType": ".types",
    "Utm": ".types",
    "WebhookRecipient": ".types",
    "WidgetBackground": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Attachment",
    "AudienceFilter",
    "AudienceRecipient",
    "BaseMessage",
    "BaseMessageSendTo",
    "BaseSocialPresence",
    "BrandSettingsEmail",
    "BrandSettingsInApp",
    "BrandSettingsSocialPresence",
    "BrandTemplate",
    "BrandTemplateOverride",
    "Channel",
    "ChannelMetadata",
    "ChannelSource",
    "Content",
    "ContentMessage",
    "Criteria",
    "Delay",
    "ElementalActionNode",
    "ElementalBaseNode",
    "ElementalChannelNode",
    "ElementalContent",
    "ElementalContentSugar",
    "ElementalDividerNode",
    "ElementalGroupNode",
    "ElementalImageNode",
    "ElementalMetaNode",
    "ElementalNode",
    "ElementalNode_Action",
    "ElementalNode_Channel",
    "ElementalNode_Divider",
    "ElementalNode_Group",
    "ElementalNode_Image",
    "ElementalNode_Meta",
    "ElementalNode_Quote",
    "ElementalNode_Text",
    "ElementalQuoteNode",
    "ElementalTextNode",
    "EmailFooter",
    "EmailHead",
    "EmailHeader",
    "ExpiresInType",
    "Expiry",
    "IActionButtonStyle",
    "IAlignment",
    "IPreferences",
    "IProfilePreferences",
    "Icons",
    "InAppPlacement",
    "InvalidListPatternRecipient",
    "InvalidListRecipient",
    "InvalidUserRecipient",
    "ListFilter",
    "ListPatternRecipient",
    "ListPatternRecipientType",
    "ListRecipient",
    "ListRecipientType",
    "Locale",
    "Locales",
    "Logo",
    "Message",
    "MessageChannels",
    "MessageContext",
    "MessageData",
    "MessageMetadata",
    "MessagePreferences",
    "MessageProviders",
    "MessageProvidersType",
    "MessageRecipient",
    "Metadata",
    "MsTeamsRecipient",
    "PagerdutyRecipient",
    "Preference",
    "Preferences",
    "Recipient",
    "RecipientData",
    "Routing",
    "RoutingMethod",
    "RuleType",
    "SlackRecipient",
    "TemplateMessage",
    "TextAlign",
    "TextStyle",
    "Timeout",
    "Timeouts",
    "TrackingOverride",
    "UserRecipient",
    "UserRecipientType",
    "Utm",
    "WebhookRecipient",
    "WidgetBackground",
]
