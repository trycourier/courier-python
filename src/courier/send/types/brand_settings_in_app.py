# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...brands.types.brand_colors import BrandColors
from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .icons import Icons
from .in_app_placement import InAppPlacement
from .preferences import Preferences
from .widget_background import WidgetBackground


class BrandSettingsInApp(pydantic_v1.BaseModel):
    border_radius: typing.Optional[str] = pydantic_v1.Field(alias="borderRadius", default=None)
    disable_message_icon: typing.Optional[bool] = pydantic_v1.Field(alias="disableMessageIcon", default=None)
    font_family: typing.Optional[str] = pydantic_v1.Field(alias="fontFamily", default=None)
    placement: typing.Optional[InAppPlacement] = None
    widget_background: WidgetBackground = pydantic_v1.Field(alias="widgetBackground")
    colors: BrandColors
    icons: Icons
    preferences: Preferences

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
