# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel
from .channel_metadata import ChannelMetadata
from .routing_method import RoutingMethod
from .timeouts import Timeouts


class Channel(UncheckedBaseModel):
    brand_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Id of the brand that should be used for rendering the message. 
    If not specified, the brand configured as default brand will be used.
    """

    providers: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    A list of providers enabled for this channel. Courier will select 
    one provider to send through unless routing_method is set to all.
    """

    routing_method: typing.Optional[RoutingMethod] = pydantic.Field(default=None)
    """
    The method for selecting the providers to send the message with. 
    Single will send to one of the available providers for this channel, 
    all will send the message through all channels. Defaults to `single`.
    """

    if_: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="if")] = pydantic.Field(default=None)
    """
    A JavaScript conditional expression to determine if the message should 
    be sent through the channel. Has access to the data and profile object.
    Only applies when a custom routing strategy is defined.
    For example, `data.name === profile.name`
    """

    timeouts: typing.Optional[Timeouts] = None
    override: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Channel specific overrides.
    """

    metadata: typing.Optional[ChannelMetadata] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
