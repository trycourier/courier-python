# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from .base_message import BaseMessage
from .base_message_send_to import BaseMessageSendTo
from .content import Content


class ContentMessage(BaseMessage, BaseMessageSendTo):
    """
    The message property has the following primary top-level properties. They define the destination and content of the message.
    Additional advanced configuration fields [are defined below](https://www.courier.com/docs/reference/send/message/#other-message-properties).
    """

    content: Content = pydantic.Field()
    """
    Describes the content of the message in a way that will work for email, push, 
    chat, or any channel. Either this or template must be specified.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .elemental_channel_node import ElementalChannelNode  # noqa: E402, F401, I001
from .elemental_group_node import ElementalGroupNode  # noqa: E402, F401, I001
from ...notifications.types.message_routing import MessageRouting  # noqa: E402, F401, I001

update_forward_refs(ContentMessage)
