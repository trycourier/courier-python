# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from .elemental_base_node import ElementalBaseNode
from .locales import Locales
from .text_align import TextAlign
from .text_style import TextStyle


class ElementalTextNode(ElementalBaseNode):
    """
    Represents a body of text to be rendered inside of the notification.
    """

    content: str = pydantic.Field()
    """
    The text content displayed in the notification. Either this
    field must be specified, or the elements field
    """

    align: TextAlign = pydantic.Field()
    """
    Text alignment.
    """

    text_style: typing.Optional[TextStyle] = pydantic.Field(default=None)
    """
    Allows the text to be rendered as a heading level.
    """

    color: typing.Optional[str] = pydantic.Field(default=None)
    """
    Specifies the color of text. Can be any valid css color value
    """

    bold: typing.Optional[str] = pydantic.Field(default=None)
    """
    Apply bold to the text
    """

    italic: typing.Optional[str] = pydantic.Field(default=None)
    """
    Apply italics to the text
    """

    strikethrough: typing.Optional[str] = pydantic.Field(default=None)
    """
    Apply a strike through the text
    """

    underline: typing.Optional[str] = pydantic.Field(default=None)
    """
    Apply an underline to the text
    """

    locales: typing.Optional[Locales] = pydantic.Field(default=None)
    """
    Region specific content. See [locales docs](https://www.courier.com/docs/platform/content/elemental/locales/) for more details.
    """

    format: typing.Optional[typing.Literal["markdown"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
