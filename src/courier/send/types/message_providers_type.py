# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from ...core.unchecked_base_model import UncheckedBaseModel
from .metadata import Metadata


class MessageProvidersType(UncheckedBaseModel):
    override: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Provider specific overrides.
    """

    if_: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="if")] = pydantic.Field(default=None)
    """
    A JavaScript conditional expression to determine if the message should
    be sent through the provider. Has access to the data and profile object.
    Only applies when a custom routing strategy is defined.
    For example, `data.name === profile.name`
    """

    timeouts: typing.Optional[int] = None
    metadata: typing.Optional[Metadata] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
