# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ...core.unchecked_base_model import UncheckedBaseModel
from .routing_method import RoutingMethod


class Routing(UncheckedBaseModel):
    """
    Allows you to customize which channel(s) Courier will potentially deliver the message.
    If no routing key is specified, Courier will use the default routing configuration or
    routing defined by the template.
    """

    method: RoutingMethod
    channels: typing.List["MessageRoutingChannel"] = pydantic.Field()
    """
    A list of channels or providers to send the message through. Can also recursively define 
    sub-routing methods, which can be useful for defining advanced push notification 
    delivery strategies.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...notifications.types.message_routing import MessageRouting  # noqa: E402, F401, I001
from ...notifications.types.message_routing_channel import MessageRoutingChannel  # noqa: E402, F401, I001

update_forward_refs(Routing)
