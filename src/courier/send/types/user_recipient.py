# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from .i_profile_preferences import IProfilePreferences
from .message_context import MessageContext
from .message_data import MessageData
from .user_recipient_type import UserRecipientType


class UserRecipient(UserRecipientType):
    account_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Use `tenant_id` instad.
    """

    context: typing.Optional[MessageContext] = pydantic.Field(default=None)
    """
    Context information such as tenant_id to send the notification with.
    """

    data: typing.Optional[MessageData] = None
    email: typing.Optional[str] = None
    locale: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's preferred ISO 639-1 language code.
    """

    user_id: typing.Optional[str] = None
    phone_number: typing.Optional[str] = None
    preferences: typing.Optional[IProfilePreferences] = None
    tenant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    An id of a tenant, [see tenants api docs](https://www.courier.com/docs/reference/tenants). 
    Will load brand, default preferences and any other base context data associated with this tenant.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
