# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .routing_strategy import RoutingStrategy
from .tag import Tag


class NotificationTemplates(pydantic_v1.BaseModel):
    created_at: int = pydantic_v1.Field()
    """
    A UTC timestamp at which notification was created. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
    """

    id: str = pydantic_v1.Field()
    """
    A unique identifier associated with the notification.
    """

    routing: RoutingStrategy = pydantic_v1.Field()
    """
    Routing strategy used by this notification.
    """

    tags: typing.List[Tag] = pydantic_v1.Field()
    """
    A list of tags attached to the notification.
    """

    title: str = pydantic_v1.Field()
    """
    The title of the notification.
    """

    updated_at: int = pydantic_v1.Field()
    """
    A UTC timestamp at which notification was updated. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
