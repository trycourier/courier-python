# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTenantsClient, RawTenantsClient
from .types.default_preferences import DefaultPreferences
from .types.get_template_by_tenant_response import GetTemplateByTenantResponse
from .types.list_templates_by_tenant_response import ListTemplatesByTenantResponse
from .types.list_users_for_tenant_response import ListUsersForTenantResponse
from .types.subscription_topic_new import SubscriptionTopicNew
from .types.tenant import Tenant
from .types.tenant_list_response import TenantListResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TenantsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTenantsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTenantsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTenantsClient
        """
        return self._raw_client

    def create_or_replace(
        self,
        tenant_id: str,
        *,
        name: str,
        parent_tenant_id: typing.Optional[str] = OMIT,
        default_preferences: typing.Optional[DefaultPreferences] = OMIT,
        properties: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        user_profile: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        brand_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Tenant:
        """
        Parameters
        ----------
        tenant_id : str
            A unique identifier representing the tenant to be returned.

        name : str
            Name of the tenant.

        parent_tenant_id : typing.Optional[str]
            Tenant's parent id (if any).

        default_preferences : typing.Optional[DefaultPreferences]
            Defines the preferences used for the tenant when the user hasn't specified their own.

        properties : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Arbitrary properties accessible to a template.

        user_profile : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            A user profile object merged with user profile on send.

        brand_id : typing.Optional[str]
            Brand to be used for the account when one is not specified by the send call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tenant

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.create_or_replace(
            tenant_id="tenant_id",
            name="name",
        )
        """
        _response = self._raw_client.create_or_replace(
            tenant_id,
            name=name,
            parent_tenant_id=parent_tenant_id,
            default_preferences=default_preferences,
            properties=properties,
            user_profile=user_profile,
            brand_id=brand_id,
            request_options=request_options,
        )
        return _response.data

    def get(self, tenant_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Tenant:
        """
        Parameters
        ----------
        tenant_id : str
            A unique identifier representing the tenant to be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tenant

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.get(
            tenant_id="tenant_id",
        )
        """
        _response = self._raw_client.get(tenant_id, request_options=request_options)
        return _response.data

    def list(
        self,
        *,
        parent_tenant_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantListResponse:
        """
        Parameters
        ----------
        parent_tenant_id : typing.Optional[str]
            Filter the list of tenants by parent_id

        limit : typing.Optional[int]
            The number of tenants to return
            (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantListResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.list()
        """
        _response = self._raw_client.list(
            parent_tenant_id=parent_tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data

    def delete(self, tenant_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to be deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.delete(
            tenant_id="tenant_id",
        )
        """
        _response = self._raw_client.delete(tenant_id, request_options=request_options)
        return _response.data

    def get_users_by_tenant(
        self,
        tenant_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersForTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for user membership.

        limit : typing.Optional[int]
            The number of accounts to return
            (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersForTenantResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.get_users_by_tenant(
            tenant_id="tenant_id",
        )
        """
        _response = self._raw_client.get_users_by_tenant(
            tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data

    def create_or_replace_default_preferences_for_topic(
        self,
        tenant_id: str,
        topic_id: str,
        *,
        request: SubscriptionTopicNew,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to update the default preferences for.

        topic_id : str
            Id fo the susbcription topic you want to have a default preference for.

        request : SubscriptionTopicNew

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier
        from courier.tenants import SubscriptionTopicNew

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.create_or_replace_default_preferences_for_topic(
            tenant_id="tenantABC",
            topic_id="HB529N49MD4D5PMX9WR5P4JH78NA",
            request=SubscriptionTopicNew(
                status="OPTED_IN",
                has_custom_routing=True,
                custom_routing=["inbox"],
            ),
        )
        """
        _response = self._raw_client.create_or_replace_default_preferences_for_topic(
            tenant_id, topic_id, request=request, request_options=request_options
        )
        return _response.data

    def remove_default_preferences_for_topic(
        self, tenant_id: str, topic_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to update the default preferences for.

        topic_id : str
            Id fo the susbcription topic you want to have a default preference for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.remove_default_preferences_for_topic(
            tenant_id="tenant_id",
            topic_id="topic_id",
        )
        """
        _response = self._raw_client.remove_default_preferences_for_topic(
            tenant_id, topic_id, request_options=request_options
        )
        return _response.data

    def get_template_by_tenant(
        self, tenant_id: str, template_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetTemplateByTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for which to retrieve the template.

        template_id : str
            Id of the template to be retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetTemplateByTenantResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.get_template_by_tenant(
            tenant_id="tenant_id",
            template_id="template_id",
        )
        """
        _response = self._raw_client.get_template_by_tenant(tenant_id, template_id, request_options=request_options)
        return _response.data

    def get_template_list_by_tenant(
        self,
        tenant_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListTemplatesByTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for which to retrieve the templates.

        limit : typing.Optional[int]
            The number of templates to return (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListTemplatesByTenantResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.tenants.get_template_list_by_tenant(
            tenant_id="tenant_id",
        )
        """
        _response = self._raw_client.get_template_list_by_tenant(
            tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data


class AsyncTenantsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTenantsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTenantsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTenantsClient
        """
        return self._raw_client

    async def create_or_replace(
        self,
        tenant_id: str,
        *,
        name: str,
        parent_tenant_id: typing.Optional[str] = OMIT,
        default_preferences: typing.Optional[DefaultPreferences] = OMIT,
        properties: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        user_profile: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        brand_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Tenant:
        """
        Parameters
        ----------
        tenant_id : str
            A unique identifier representing the tenant to be returned.

        name : str
            Name of the tenant.

        parent_tenant_id : typing.Optional[str]
            Tenant's parent id (if any).

        default_preferences : typing.Optional[DefaultPreferences]
            Defines the preferences used for the tenant when the user hasn't specified their own.

        properties : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Arbitrary properties accessible to a template.

        user_profile : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            A user profile object merged with user profile on send.

        brand_id : typing.Optional[str]
            Brand to be used for the account when one is not specified by the send call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tenant

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.create_or_replace(
                tenant_id="tenant_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_or_replace(
            tenant_id,
            name=name,
            parent_tenant_id=parent_tenant_id,
            default_preferences=default_preferences,
            properties=properties,
            user_profile=user_profile,
            brand_id=brand_id,
            request_options=request_options,
        )
        return _response.data

    async def get(self, tenant_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Tenant:
        """
        Parameters
        ----------
        tenant_id : str
            A unique identifier representing the tenant to be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tenant

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.get(
                tenant_id="tenant_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(tenant_id, request_options=request_options)
        return _response.data

    async def list(
        self,
        *,
        parent_tenant_id: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantListResponse:
        """
        Parameters
        ----------
        parent_tenant_id : typing.Optional[str]
            Filter the list of tenants by parent_id

        limit : typing.Optional[int]
            The number of tenants to return
            (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantListResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            parent_tenant_id=parent_tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data

    async def delete(self, tenant_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to be deleted.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.delete(
                tenant_id="tenant_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(tenant_id, request_options=request_options)
        return _response.data

    async def get_users_by_tenant(
        self,
        tenant_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUsersForTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for user membership.

        limit : typing.Optional[int]
            The number of accounts to return
            (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUsersForTenantResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.get_users_by_tenant(
                tenant_id="tenant_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_users_by_tenant(
            tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data

    async def create_or_replace_default_preferences_for_topic(
        self,
        tenant_id: str,
        topic_id: str,
        *,
        request: SubscriptionTopicNew,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to update the default preferences for.

        topic_id : str
            Id fo the susbcription topic you want to have a default preference for.

        request : SubscriptionTopicNew

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.tenants import SubscriptionTopicNew

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.create_or_replace_default_preferences_for_topic(
                tenant_id="tenantABC",
                topic_id="HB529N49MD4D5PMX9WR5P4JH78NA",
                request=SubscriptionTopicNew(
                    status="OPTED_IN",
                    has_custom_routing=True,
                    custom_routing=["inbox"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_or_replace_default_preferences_for_topic(
            tenant_id, topic_id, request=request, request_options=request_options
        )
        return _response.data

    async def remove_default_preferences_for_topic(
        self, tenant_id: str, topic_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant to update the default preferences for.

        topic_id : str
            Id fo the susbcription topic you want to have a default preference for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.remove_default_preferences_for_topic(
                tenant_id="tenant_id",
                topic_id="topic_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_default_preferences_for_topic(
            tenant_id, topic_id, request_options=request_options
        )
        return _response.data

    async def get_template_by_tenant(
        self, tenant_id: str, template_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetTemplateByTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for which to retrieve the template.

        template_id : str
            Id of the template to be retrieved.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetTemplateByTenantResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.get_template_by_tenant(
                tenant_id="tenant_id",
                template_id="template_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_template_by_tenant(
            tenant_id, template_id, request_options=request_options
        )
        return _response.data

    async def get_template_list_by_tenant(
        self,
        tenant_id: str,
        *,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListTemplatesByTenantResponse:
        """
        Parameters
        ----------
        tenant_id : str
            Id of the tenant for which to retrieve the templates.

        limit : typing.Optional[int]
            The number of templates to return (defaults to 20, maximum value of 100)

        cursor : typing.Optional[str]
            Continue the pagination with the next cursor

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListTemplatesByTenantResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.tenants.get_template_list_by_tenant(
                tenant_id="tenant_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_template_list_by_tenant(
            tenant_id, limit=limit, cursor=cursor, request_options=request_options
        )
        return _response.data
