# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .default_preferences import DefaultPreferences
    from .get_template_by_tenant_response import GetTemplateByTenantResponse
    from .list_templates_by_tenant_response import ListTemplatesByTenantResponse
    from .list_users_for_tenant_response import ListUsersForTenantResponse
    from .subscription_topic import SubscriptionTopic
    from .subscription_topic_new import SubscriptionTopicNew
    from .subscription_topic_status import SubscriptionTopicStatus
    from .template_property import TemplateProperty
    from .tenant import Tenant
    from .tenant_list_response import TenantListResponse
_dynamic_imports: typing.Dict[str, str] = {
    "DefaultPreferences": ".default_preferences",
    "GetTemplateByTenantResponse": ".get_template_by_tenant_response",
    "ListTemplatesByTenantResponse": ".list_templates_by_tenant_response",
    "ListUsersForTenantResponse": ".list_users_for_tenant_response",
    "SubscriptionTopic": ".subscription_topic",
    "SubscriptionTopicNew": ".subscription_topic_new",
    "SubscriptionTopicStatus": ".subscription_topic_status",
    "TemplateProperty": ".template_property",
    "Tenant": ".tenant",
    "TenantListResponse": ".tenant_list_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "DefaultPreferences",
    "GetTemplateByTenantResponse",
    "ListTemplatesByTenantResponse",
    "ListUsersForTenantResponse",
    "SubscriptionTopic",
    "SubscriptionTopicNew",
    "SubscriptionTopicStatus",
    "TemplateProperty",
    "Tenant",
    "TenantListResponse",
]
