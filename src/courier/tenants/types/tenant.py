# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .default_preferences import DefaultPreferences


class Tenant(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Id of the tenant.
    """

    name: str = pydantic.Field()
    """
    Name of the tenant.
    """

    parent_tenant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tenant's parent id (if any).
    """

    default_preferences: typing.Optional[DefaultPreferences] = pydantic.Field(default=None)
    """
    Defines the preferences used for the account when the user hasn't specified their own.
    """

    properties: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Arbitrary properties accessible to a template.
    """

    user_profile: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    A user profile object merged with user profile on send.
    """

    brand_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Brand to be used for the account when one is not specified by the send call.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
