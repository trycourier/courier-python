# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from .default_preferences import DefaultPreferences
from .template_property import TemplateProperty

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Tenant(pydantic.BaseModel):
    id: str = pydantic.Field()
    """
    Id of the tenant.
    """

    name: str = pydantic.Field()
    """
    Name of the tenant.
    """

    parent_tenant_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tenant's parent id (if any).
    """

    default_preferences: typing.Optional[DefaultPreferences] = pydantic.Field(default=None)
    """
    Defines the preferences used for the account when the user hasn't specified their own.
    """

    properties: typing.Optional[TemplateProperty] = pydantic.Field(default=None)
    """
    Arbitrary properties accessible to a template.
    """

    user_profile: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    A user profile object merged with user profile on send.
    """

    brand_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Brand to be used for the account when one is not specified by the send call.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
