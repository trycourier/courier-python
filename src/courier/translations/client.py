# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.not_found import NotFound
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.unchecked_base_model import construct_type

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TranslationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, domain: str, locale: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get translations by locale

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            .po file translation content

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.translations.get(
            domain="domain",
            locale="locale",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"translations/{jsonable_encoder(domain)}/{jsonable_encoder(locale)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(str, construct_type(type_=str, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, domain: str, locale: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update a translation

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.translations.update(
            domain="domain",
            locale="locale",
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"translations/{jsonable_encoder(domain)}/{jsonable_encoder(locale)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTranslationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, domain: str, locale: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get translations by locale

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            .po file translation content

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.translations.get(
                domain="domain",
                locale="locale",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"translations/{jsonable_encoder(domain)}/{jsonable_encoder(locale)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(str, construct_type(type_=str, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, domain: str, locale: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update a translation

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.translations.update(
                domain="domain",
                locale="locale",
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"translations/{jsonable_encoder(domain)}/{jsonable_encoder(locale)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
