# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTranslationsClient, RawTranslationsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TranslationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTranslationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTranslationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTranslationsClient
        """
        return self._raw_client

    def get(self, domain: str, locale: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get translations by locale

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            .po file translation content

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.translations.get(
            domain="domain",
            locale="locale",
        )
        """
        _response = self._raw_client.get(domain, locale, request_options=request_options)
        return _response.data

    def update(
        self, domain: str, locale: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update a translation

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.translations.update(
            domain="domain",
            locale="locale",
            request="string",
        )
        """
        _response = self._raw_client.update(domain, locale, request=request, request_options=request_options)
        return _response.data


class AsyncTranslationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTranslationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTranslationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTranslationsClient
        """
        return self._raw_client

    async def get(self, domain: str, locale: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Get translations by locale

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            .po file translation content

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.translations.get(
                domain="domain",
                locale="locale",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(domain, locale, request_options=request_options)
        return _response.data

    async def update(
        self, domain: str, locale: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update a translation

        Parameters
        ----------
        domain : str
            The domain you want to retrieve translations for. Only `default` is supported at the moment

        locale : str
            The locale you want to retrieve the translations for

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.translations.update(
                domain="domain",
                locale="locale",
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(domain, locale, request=request, request_options=request_options)
        return _response.data
