# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import preferences, tenants, tokens
    from .preferences import (
        TopicPreference,
        TopicPreferenceUpdate,
        UserPreferencesGetResponse,
        UserPreferencesListResponse,
        UserPreferencesUpdateResponse,
    )
    from .tenants import AddUserToSingleTenantsParamsProfile, ListTenantsForUserResponse
    from .tokens import (
        DeleteUserTokenOpts,
        Device,
        ExpiryDate,
        GetAllTokensResponse,
        GetUserTokenOpts,
        GetUserTokenResponse,
        GetUserTokensOpts,
        PatchOp,
        PatchOperation,
        PatchUserTokenOpts,
        ProviderKey,
        PutUserTokenOpts,
        PutUserTokensOpts,
        TokenStatus,
        Tracking,
        UserToken,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "AddUserToSingleTenantsParamsProfile": ".tenants",
    "DeleteUserTokenOpts": ".tokens",
    "Device": ".tokens",
    "ExpiryDate": ".tokens",
    "GetAllTokensResponse": ".tokens",
    "GetUserTokenOpts": ".tokens",
    "GetUserTokenResponse": ".tokens",
    "GetUserTokensOpts": ".tokens",
    "ListTenantsForUserResponse": ".tenants",
    "PatchOp": ".tokens",
    "PatchOperation": ".tokens",
    "PatchUserTokenOpts": ".tokens",
    "ProviderKey": ".tokens",
    "PutUserTokenOpts": ".tokens",
    "PutUserTokensOpts": ".tokens",
    "TokenStatus": ".tokens",
    "TopicPreference": ".preferences",
    "TopicPreferenceUpdate": ".preferences",
    "Tracking": ".tokens",
    "UserPreferencesGetResponse": ".preferences",
    "UserPreferencesListResponse": ".preferences",
    "UserPreferencesUpdateResponse": ".preferences",
    "UserToken": ".tokens",
    "preferences": ".preferences",
    "tenants": ".tenants",
    "tokens": ".tokens",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AddUserToSingleTenantsParamsProfile",
    "DeleteUserTokenOpts",
    "Device",
    "ExpiryDate",
    "GetAllTokensResponse",
    "GetUserTokenOpts",
    "GetUserTokenResponse",
    "GetUserTokensOpts",
    "ListTenantsForUserResponse",
    "PatchOp",
    "PatchOperation",
    "PatchUserTokenOpts",
    "ProviderKey",
    "PutUserTokenOpts",
    "PutUserTokensOpts",
    "TokenStatus",
    "TopicPreference",
    "TopicPreferenceUpdate",
    "Tracking",
    "UserPreferencesGetResponse",
    "UserPreferencesListResponse",
    "UserPreferencesUpdateResponse",
    "UserToken",
    "preferences",
    "tenants",
    "tokens",
]
