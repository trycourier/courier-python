# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawUsersClient, RawUsersClient

if typing.TYPE_CHECKING:
    from .preferences.client import AsyncPreferencesClient, PreferencesClient
    from .tenants.client import AsyncTenantsClient, TenantsClient
    from .tokens.client import AsyncTokensClient, TokensClient


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._preferences: typing.Optional[PreferencesClient] = None
        self._tenants: typing.Optional[TenantsClient] = None
        self._tokens: typing.Optional[TokensClient] = None

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    @property
    def preferences(self):
        if self._preferences is None:
            from .preferences.client import PreferencesClient  # noqa: E402

            self._preferences = PreferencesClient(client_wrapper=self._client_wrapper)
        return self._preferences

    @property
    def tenants(self):
        if self._tenants is None:
            from .tenants.client import TenantsClient  # noqa: E402

            self._tenants = TenantsClient(client_wrapper=self._client_wrapper)
        return self._tenants

    @property
    def tokens(self):
        if self._tokens is None:
            from .tokens.client import TokensClient  # noqa: E402

            self._tokens = TokensClient(client_wrapper=self._client_wrapper)
        return self._tokens


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._preferences: typing.Optional[AsyncPreferencesClient] = None
        self._tenants: typing.Optional[AsyncTenantsClient] = None
        self._tokens: typing.Optional[AsyncTokensClient] = None

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    @property
    def preferences(self):
        if self._preferences is None:
            from .preferences.client import AsyncPreferencesClient  # noqa: E402

            self._preferences = AsyncPreferencesClient(client_wrapper=self._client_wrapper)
        return self._preferences

    @property
    def tenants(self):
        if self._tenants is None:
            from .tenants.client import AsyncTenantsClient  # noqa: E402

            self._tenants = AsyncTenantsClient(client_wrapper=self._client_wrapper)
        return self._tenants

    @property
    def tokens(self):
        if self._tokens is None:
            from .tokens.client import AsyncTokensClient  # noqa: E402

            self._tokens = AsyncTokensClient(client_wrapper=self._client_wrapper)
        return self._tokens
