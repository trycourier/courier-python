# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawPreferencesClient, RawPreferencesClient
from .types.topic_preference_update import TopicPreferenceUpdate
from .types.user_preferences_get_response import UserPreferencesGetResponse
from .types.user_preferences_list_response import UserPreferencesListResponse
from .types.user_preferences_update_response import UserPreferencesUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PreferencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPreferencesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPreferencesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPreferencesClient
        """
        return self._raw_client

    def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesListResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.list(
            user_id="user_id",
        )
        """
        _response = self._raw_client.list(user_id, tenant_id=tenant_id, request_options=request_options)
        return _response.data

    def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesGetResponse

        Examples
        --------
        from courier import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.get(
            user_id="user_id",
            topic_id="topic_id",
        )
        """
        _response = self._raw_client.get(user_id, topic_id, tenant_id=tenant_id, request_options=request_options)
        return _response.data

    def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesUpdateResponse

        Examples
        --------
        from courier import Courier
        from courier.users.preferences import TopicPreferenceUpdate

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.update(
            user_id="abc-123",
            topic_id="74Q4QGFBEX481DP6JRPMV751H4XT",
            topic=TopicPreferenceUpdate(
                status="OPTED_IN",
                has_custom_routing=True,
                custom_routing=["inbox", "email"],
            ),
        )
        """
        _response = self._raw_client.update(
            user_id, topic_id, topic=topic, tenant_id=tenant_id, request_options=request_options
        )
        return _response.data


class AsyncPreferencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPreferencesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPreferencesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPreferencesClient
        """
        return self._raw_client

    async def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesListResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.list(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(user_id, tenant_id=tenant_id, request_options=request_options)
        return _response.data

    async def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesGetResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.get(
                user_id="user_id",
                topic_id="topic_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(user_id, topic_id, tenant_id=tenant_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesUpdateResponse

        Examples
        --------
        import asyncio

        from courier import AsyncCourier
        from courier.users.preferences import TopicPreferenceUpdate

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.update(
                user_id="abc-123",
                topic_id="74Q4QGFBEX481DP6JRPMV751H4XT",
                topic=TopicPreferenceUpdate(
                    status="OPTED_IN",
                    has_custom_routing=True,
                    custom_routing=["inbox", "email"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            user_id, topic_id, topic=topic, tenant_id=tenant_id, request_options=request_options
        )
        return _response.data
