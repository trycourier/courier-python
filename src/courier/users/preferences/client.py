# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...commons.errors.bad_request_error import BadRequestError
from ...commons.errors.not_found_error import NotFoundError
from ...commons.types.bad_request import BadRequest
from ...commons.types.not_found import NotFound
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from .types.topic_preference_update import TopicPreferenceUpdate
from .types.user_preferences_get_response import UserPreferencesGetResponse
from .types.user_preferences_list_response import UserPreferencesListResponse
from .types.user_preferences_update_response import UserPreferencesUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PreferencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesListResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.list(
            user_id="user_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences",
            method="GET",
            params={"tenant_id": tenant_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesListResponse, construct_type(type_=UserPreferencesListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesGetResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.get(
            user_id="user_id",
            topic_id="topic_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="GET",
            params={"tenant_id": tenant_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesGetResponse, construct_type(type_=UserPreferencesGetResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesUpdateResponse

        Examples
        --------
        from courier.client import Courier
        from courier.users import TopicPreferenceUpdate

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.preferences.update(
            user_id="abc-123",
            topic_id="74Q4QGFBEX481DP6JRPMV751H4XT",
            topic=TopicPreferenceUpdate(
                status="OPTED_IN",
                has_custom_routing=True,
                custom_routing=["inbox", "email"],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="PUT",
            params={"tenant_id": tenant_id},
            json={"topic": topic},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesUpdateResponse, construct_type(type_=UserPreferencesUpdateResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPreferencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesListResponse:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesListResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.list(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences",
            method="GET",
            params={"tenant_id": tenant_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesListResponse, construct_type(type_=UserPreferencesListResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesGetResponse:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesGetResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.get(
                user_id="user_id",
                topic_id="topic_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="GET",
            params={"tenant_id": tenant_id},
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesGetResponse, construct_type(type_=UserPreferencesGetResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(NotFound, construct_type(type_=NotFound, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserPreferencesUpdateResponse:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserPreferencesUpdateResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier
        from courier.users import TopicPreferenceUpdate

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.preferences.update(
                user_id="abc-123",
                topic_id="74Q4QGFBEX481DP6JRPMV751H4XT",
                topic=TopicPreferenceUpdate(
                    status="OPTED_IN",
                    has_custom_routing=True,
                    custom_routing=["inbox", "email"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="PUT",
            params={"tenant_id": tenant_id},
            json={"topic": topic},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(UserPreferencesUpdateResponse, construct_type(type_=UserPreferencesUpdateResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
