# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...commons.errors.bad_request_error import BadRequestError
from ...commons.errors.not_found_error import NotFoundError
from ...commons.types.bad_request import BadRequest
from ...commons.types.not_found import NotFound
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.unchecked_base_model import construct_type
from .types.topic_preference_update import TopicPreferenceUpdate
from .types.user_preferences_get_response import UserPreferencesGetResponse
from .types.user_preferences_list_response import UserPreferencesListResponse
from .types.user_preferences_update_response import UserPreferencesUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawPreferencesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserPreferencesListResponse]:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserPreferencesListResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences",
            method="GET",
            params={
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesListResponse,
                    construct_type(
                        type_=UserPreferencesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserPreferencesGetResponse]:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserPreferencesGetResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="GET",
            params={
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesGetResponse,
                    construct_type(
                        type_=UserPreferencesGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        NotFound,
                        construct_type(
                            type_=NotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserPreferencesUpdateResponse]:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserPreferencesUpdateResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="PUT",
            params={
                "tenant_id": tenant_id,
            },
            json={
                "topic": convert_and_respect_annotation_metadata(
                    object_=topic, annotation=TopicPreferenceUpdate, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesUpdateResponse,
                    construct_type(
                        type_=UserPreferencesUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawPreferencesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        user_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserPreferencesListResponse]:
        """
        Fetch all user preferences.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserPreferencesListResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences",
            method="GET",
            params={
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesListResponse,
                    construct_type(
                        type_=UserPreferencesListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self,
        user_id: str,
        topic_id: str,
        *,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserPreferencesGetResponse]:
        """
        Fetch user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        tenant_id : typing.Optional[str]
            Query the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserPreferencesGetResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="GET",
            params={
                "tenant_id": tenant_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesGetResponse,
                    construct_type(
                        type_=UserPreferencesGetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        NotFound,
                        construct_type(
                            type_=NotFound,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        user_id: str,
        topic_id: str,
        *,
        topic: TopicPreferenceUpdate,
        tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserPreferencesUpdateResponse]:
        """
        Update or Create user preferences for a specific subscription topic.

        Parameters
        ----------
        user_id : str
            A unique identifier associated with the user whose preferences you wish to retrieve.

        topic_id : str
            A unique identifier associated with a subscription topic.

        topic : TopicPreferenceUpdate

        tenant_id : typing.Optional[str]
            Update the preferences of a user for this specific tenant context.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserPreferencesUpdateResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/preferences/{jsonable_encoder(topic_id)}",
            method="PUT",
            params={
                "tenant_id": tenant_id,
            },
            json={
                "topic": convert_and_respect_annotation_metadata(
                    object_=topic, annotation=TopicPreferenceUpdate, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserPreferencesUpdateResponse,
                    construct_type(
                        type_=UserPreferencesUpdateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        BadRequest,
                        construct_type(
                            type_=BadRequest,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
