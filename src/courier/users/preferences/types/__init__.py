# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .topic_preference import TopicPreference
    from .topic_preference_update import TopicPreferenceUpdate
    from .user_preferences_get_response import UserPreferencesGetResponse
    from .user_preferences_list_response import UserPreferencesListResponse
    from .user_preferences_update_response import UserPreferencesUpdateResponse
_dynamic_imports: typing.Dict[str, str] = {
    "TopicPreference": ".topic_preference",
    "TopicPreferenceUpdate": ".topic_preference_update",
    "UserPreferencesGetResponse": ".user_preferences_get_response",
    "UserPreferencesListResponse": ".user_preferences_list_response",
    "UserPreferencesUpdateResponse": ".user_preferences_update_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "TopicPreference",
    "TopicPreferenceUpdate",
    "UserPreferencesGetResponse",
    "UserPreferencesListResponse",
    "UserPreferencesUpdateResponse",
]
