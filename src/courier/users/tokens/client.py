# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...commons.errors.bad_request_error import BadRequestError
from ...commons.types.bad_request import BadRequest
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.request_options import RequestOptions
from ...core.unchecked_base_model import construct_type
from .types.get_all_tokens_response import GetAllTokensResponse
from .types.get_user_token_response import GetUserTokenResponse
from .types.patch_user_token_opts import PatchUserTokenOpts
from .types.user_token import UserToken

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def add_multiple(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Adds multiple tokens to a user and overwrites matching existing tokens.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.add_multiple(
            user_id="user_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add(
        self, user_id: str, token: str, *, request: UserToken, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Adds a single token to a user and overwrites a matching existing token.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request : UserToken

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier
        from courier.users import UserToken

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.add(
            user_id="user_id",
            token="token",
            request=UserToken(
                provider_key="firebase-fcm",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        user_id: str,
        token: str,
        *,
        request: PatchUserTokenOpts,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a JSON Patch (RFC 6902) to the specified token.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request : PatchUserTokenOpts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier
        from courier.users import PatchOperation, PatchUserTokenOpts

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.update(
            user_id="user_id",
            token="token",
            request=PatchUserTokenOpts(
                patch=[
                    PatchOperation(
                        op="op",
                        path="path",
                    ),
                    PatchOperation(
                        op="op",
                        path="path",
                    ),
                ],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="PATCH",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, user_id: str, token: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetUserTokenResponse:
        """
        Get single token available for a `:token`

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserTokenResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.get(
            user_id="user_id",
            token="token",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetUserTokenResponse, construct_type(type_=GetUserTokenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetAllTokensResponse:
        """
        Gets all tokens available for a :user_id

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAllTokensResponse

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.list(
            user_id="user_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetAllTokensResponse, construct_type(type_=GetAllTokensResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, user_id: str, token: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from courier.client import Courier

        client = Courier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )
        client.users.tokens.delete(
            user_id="user_id",
            token="token",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def add_multiple(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Adds multiple tokens to a user and overwrites matching existing tokens.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.add_multiple(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens", method="PUT", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add(
        self, user_id: str, token: str, *, request: UserToken, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Adds a single token to a user and overwrites a matching existing token.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request : UserToken

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier
        from courier.users import UserToken

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.add(
                user_id="user_id",
                token="token",
                request=UserToken(
                    provider_key="firebase-fcm",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        user_id: str,
        token: str,
        *,
        request: PatchUserTokenOpts,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a JSON Patch (RFC 6902) to the specified token.

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request : PatchUserTokenOpts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier
        from courier.users import PatchOperation, PatchUserTokenOpts

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.update(
                user_id="user_id",
                token="token",
                request=PatchUserTokenOpts(
                    patch=[
                        PatchOperation(
                            op="op",
                            path="path",
                        ),
                        PatchOperation(
                            op="op",
                            path="path",
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="PATCH",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, user_id: str, token: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetUserTokenResponse:
        """
        Get single token available for a `:token`

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetUserTokenResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.get(
                user_id="user_id",
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetUserTokenResponse, construct_type(type_=GetUserTokenResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAllTokensResponse:
        """
        Gets all tokens available for a :user_id

        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAllTokensResponse

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.list(
                user_id="user_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(GetAllTokensResponse, construct_type(type_=GetAllTokensResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequest, construct_type(type_=BadRequest, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, user_id: str, token: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        user_id : str
            The user's ID. This can be any uniquely identifiable string.

        token : str
            The full token string.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from courier.client import AsyncCourier

        client = AsyncCourier(
            authorization_token="YOUR_AUTHORIZATION_TOKEN",
        )


        async def main() -> None:
            await client.users.tokens.delete(
                user_id="user_id",
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"users/{jsonable_encoder(user_id)}/tokens/{jsonable_encoder(token)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
