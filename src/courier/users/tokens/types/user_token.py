# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.unchecked_base_model import UncheckedBaseModel
from .device import Device
from .expiry_date import ExpiryDate
from .provider_key import ProviderKey
from .tracking import Tracking


class UserToken(UncheckedBaseModel):
    token: typing.Optional[str] = pydantic.Field(default=None)
    """
    Full body of the token. Must match token in URL.
    """

    provider_key: ProviderKey
    expiry_date: typing.Optional[ExpiryDate] = pydantic.Field(default=None)
    """
    ISO 8601 formatted date the token expires. Defaults to 2 months. Set to false to disable expiration.
    """

    properties: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Properties sent to the provider along with the token
    """

    device: typing.Optional[Device] = pydantic.Field(default=None)
    """
    Information about the device the token is associated with.
    """

    tracking: typing.Optional[Tracking] = pydantic.Field(default=None)
    """
    Information about the device the token is associated with.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
